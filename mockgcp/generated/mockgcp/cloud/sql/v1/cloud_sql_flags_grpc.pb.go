// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_flags.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlFlagsServiceClient is the client API for SqlFlagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlFlagsServiceClient interface {
	// Lists all available database flags for Cloud SQL instances.
	List(ctx context.Context, in *SqlFlagsListRequest, opts ...grpc.CallOption) (*FlagsListResponse, error)
}

type sqlFlagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlFlagsServiceClient(cc grpc.ClientConnInterface) SqlFlagsServiceClient {
	return &sqlFlagsServiceClient{cc}
}

func (c *sqlFlagsServiceClient) List(ctx context.Context, in *SqlFlagsListRequest, opts ...grpc.CallOption) (*FlagsListResponse, error) {
	out := new(FlagsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlFlagsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlFlagsServiceServer is the server API for SqlFlagsService service.
// All implementations must embed UnimplementedSqlFlagsServiceServer
// for forward compatibility
type SqlFlagsServiceServer interface {
	// Lists all available database flags for Cloud SQL instances.
	List(context.Context, *SqlFlagsListRequest) (*FlagsListResponse, error)
	mustEmbedUnimplementedSqlFlagsServiceServer()
}

// UnimplementedSqlFlagsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlFlagsServiceServer struct {
}

func (UnimplementedSqlFlagsServiceServer) List(context.Context, *SqlFlagsListRequest) (*FlagsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlFlagsServiceServer) mustEmbedUnimplementedSqlFlagsServiceServer() {}

// UnsafeSqlFlagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlFlagsServiceServer will
// result in compilation errors.
type UnsafeSqlFlagsServiceServer interface {
	mustEmbedUnimplementedSqlFlagsServiceServer()
}

func RegisterSqlFlagsServiceServer(s grpc.ServiceRegistrar, srv SqlFlagsServiceServer) {
	s.RegisterService(&SqlFlagsService_ServiceDesc, srv)
}

func _SqlFlagsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlFlagsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlFlagsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlFlagsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlFlagsServiceServer).List(ctx, req.(*SqlFlagsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlFlagsService_ServiceDesc is the grpc.ServiceDesc for SqlFlagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlFlagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1.SqlFlagsService",
	HandlerType: (*SqlFlagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SqlFlagsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1/cloud_sql_flags.proto",
}
