// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_backup_runs.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlBackupRunsServiceClient is the client API for SqlBackupRunsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlBackupRunsServiceClient interface {
	// Deletes the backup taken by a backup run.
	Delete(ctx context.Context, in *SqlBackupRunsDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a backup run.
	Get(ctx context.Context, in *SqlBackupRunsGetRequest, opts ...grpc.CallOption) (*BackupRun, error)
	// Creates a new backup run on demand.
	Insert(ctx context.Context, in *SqlBackupRunsInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists all backup runs associated with the project or a given instance
	// and configuration in the reverse chronological order of the backup
	// initiation time.
	List(ctx context.Context, in *SqlBackupRunsListRequest, opts ...grpc.CallOption) (*BackupRunsListResponse, error)
}

type sqlBackupRunsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlBackupRunsServiceClient(cc grpc.ClientConnInterface) SqlBackupRunsServiceClient {
	return &sqlBackupRunsServiceClient{cc}
}

func (c *sqlBackupRunsServiceClient) Delete(ctx context.Context, in *SqlBackupRunsDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) Get(ctx context.Context, in *SqlBackupRunsGetRequest, opts ...grpc.CallOption) (*BackupRun, error) {
	out := new(BackupRun)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) Insert(ctx context.Context, in *SqlBackupRunsInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) List(ctx context.Context, in *SqlBackupRunsListRequest, opts ...grpc.CallOption) (*BackupRunsListResponse, error) {
	out := new(BackupRunsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlBackupRunsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlBackupRunsServiceServer is the server API for SqlBackupRunsService service.
// All implementations must embed UnimplementedSqlBackupRunsServiceServer
// for forward compatibility
type SqlBackupRunsServiceServer interface {
	// Deletes the backup taken by a backup run.
	Delete(context.Context, *SqlBackupRunsDeleteRequest) (*Operation, error)
	// Retrieves a resource containing information about a backup run.
	Get(context.Context, *SqlBackupRunsGetRequest) (*BackupRun, error)
	// Creates a new backup run on demand.
	Insert(context.Context, *SqlBackupRunsInsertRequest) (*Operation, error)
	// Lists all backup runs associated with the project or a given instance
	// and configuration in the reverse chronological order of the backup
	// initiation time.
	List(context.Context, *SqlBackupRunsListRequest) (*BackupRunsListResponse, error)
	mustEmbedUnimplementedSqlBackupRunsServiceServer()
}

// UnimplementedSqlBackupRunsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlBackupRunsServiceServer struct {
}

func (UnimplementedSqlBackupRunsServiceServer) Delete(context.Context, *SqlBackupRunsDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) Get(context.Context, *SqlBackupRunsGetRequest) (*BackupRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) Insert(context.Context, *SqlBackupRunsInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) List(context.Context, *SqlBackupRunsListRequest) (*BackupRunsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) mustEmbedUnimplementedSqlBackupRunsServiceServer() {}

// UnsafeSqlBackupRunsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlBackupRunsServiceServer will
// result in compilation errors.
type UnsafeSqlBackupRunsServiceServer interface {
	mustEmbedUnimplementedSqlBackupRunsServiceServer()
}

func RegisterSqlBackupRunsServiceServer(s grpc.ServiceRegistrar, srv SqlBackupRunsServiceServer) {
	s.RegisterService(&SqlBackupRunsService_ServiceDesc, srv)
}

func _SqlBackupRunsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Delete(ctx, req.(*SqlBackupRunsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Get(ctx, req.(*SqlBackupRunsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlBackupRunsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Insert(ctx, req.(*SqlBackupRunsInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlBackupRunsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).List(ctx, req.(*SqlBackupRunsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlBackupRunsService_ServiceDesc is the grpc.ServiceDesc for SqlBackupRunsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlBackupRunsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1.SqlBackupRunsService",
	HandlerType: (*SqlBackupRunsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlBackupRunsService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlBackupRunsService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlBackupRunsService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlBackupRunsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1/cloud_sql_backup_runs.proto",
}
