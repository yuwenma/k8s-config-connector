// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_ssl_certs.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlSslCertsServiceClient is the client API for SqlSslCertsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlSslCertsServiceClient interface {
	// Deletes the SSL certificate. For First Generation instances, the
	// certificate remains valid until the instance is restarted.
	Delete(ctx context.Context, in *SqlSslCertsDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a particular SSL certificate.  Does not include the private key
	// (required for usage).  The private key must be saved from the response to
	// initial creation.
	Get(ctx context.Context, in *SqlSslCertsGetRequest, opts ...grpc.CallOption) (*SslCert, error)
	// Creates an SSL certificate and returns it along with the private key and
	// server certificate authority.  The new certificate will not be usable until
	// the instance is restarted.
	Insert(ctx context.Context, in *SqlSslCertsInsertRequest, opts ...grpc.CallOption) (*SslCertsInsertResponse, error)
	// Lists all of the current SSL certificates for the instance.
	List(ctx context.Context, in *SqlSslCertsListRequest, opts ...grpc.CallOption) (*SslCertsListResponse, error)
}

type sqlSslCertsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlSslCertsServiceClient(cc grpc.ClientConnInterface) SqlSslCertsServiceClient {
	return &sqlSslCertsServiceClient{cc}
}

func (c *sqlSslCertsServiceClient) Delete(ctx context.Context, in *SqlSslCertsDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlSslCertsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) Get(ctx context.Context, in *SqlSslCertsGetRequest, opts ...grpc.CallOption) (*SslCert, error) {
	out := new(SslCert)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlSslCertsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) Insert(ctx context.Context, in *SqlSslCertsInsertRequest, opts ...grpc.CallOption) (*SslCertsInsertResponse, error) {
	out := new(SslCertsInsertResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlSslCertsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) List(ctx context.Context, in *SqlSslCertsListRequest, opts ...grpc.CallOption) (*SslCertsListResponse, error) {
	out := new(SslCertsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlSslCertsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlSslCertsServiceServer is the server API for SqlSslCertsService service.
// All implementations must embed UnimplementedSqlSslCertsServiceServer
// for forward compatibility
type SqlSslCertsServiceServer interface {
	// Deletes the SSL certificate. For First Generation instances, the
	// certificate remains valid until the instance is restarted.
	Delete(context.Context, *SqlSslCertsDeleteRequest) (*Operation, error)
	// Retrieves a particular SSL certificate.  Does not include the private key
	// (required for usage).  The private key must be saved from the response to
	// initial creation.
	Get(context.Context, *SqlSslCertsGetRequest) (*SslCert, error)
	// Creates an SSL certificate and returns it along with the private key and
	// server certificate authority.  The new certificate will not be usable until
	// the instance is restarted.
	Insert(context.Context, *SqlSslCertsInsertRequest) (*SslCertsInsertResponse, error)
	// Lists all of the current SSL certificates for the instance.
	List(context.Context, *SqlSslCertsListRequest) (*SslCertsListResponse, error)
	mustEmbedUnimplementedSqlSslCertsServiceServer()
}

// UnimplementedSqlSslCertsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlSslCertsServiceServer struct {
}

func (UnimplementedSqlSslCertsServiceServer) Delete(context.Context, *SqlSslCertsDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) Get(context.Context, *SqlSslCertsGetRequest) (*SslCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) Insert(context.Context, *SqlSslCertsInsertRequest) (*SslCertsInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) List(context.Context, *SqlSslCertsListRequest) (*SslCertsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) mustEmbedUnimplementedSqlSslCertsServiceServer() {}

// UnsafeSqlSslCertsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlSslCertsServiceServer will
// result in compilation errors.
type UnsafeSqlSslCertsServiceServer interface {
	mustEmbedUnimplementedSqlSslCertsServiceServer()
}

func RegisterSqlSslCertsServiceServer(s grpc.ServiceRegistrar, srv SqlSslCertsServiceServer) {
	s.RegisterService(&SqlSslCertsService_ServiceDesc, srv)
}

func _SqlSslCertsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlSslCertsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Delete(ctx, req.(*SqlSslCertsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlSslCertsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Get(ctx, req.(*SqlSslCertsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlSslCertsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Insert(ctx, req.(*SqlSslCertsInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlSslCertsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).List(ctx, req.(*SqlSslCertsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlSslCertsService_ServiceDesc is the grpc.ServiceDesc for SqlSslCertsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlSslCertsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1.SqlSslCertsService",
	HandlerType: (*SqlSslCertsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlSslCertsService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlSslCertsService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlSslCertsService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlSslCertsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1/cloud_sql_ssl_certs.proto",
}
