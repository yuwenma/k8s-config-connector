// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_operations.proto

package sqlpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlOperationsServiceClient is the client API for SqlOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlOperationsServiceClient interface {
	// Retrieves an instance operation that has been performed on an instance.
	Get(ctx context.Context, in *SqlOperationsGetRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists all instance operations that have been performed on the given Cloud
	// SQL instance in the reverse chronological order of the start time.
	List(ctx context.Context, in *SqlOperationsListRequest, opts ...grpc.CallOption) (*OperationsListResponse, error)
	// Cancels an instance operation that has been performed on an instance.
	Cancel(ctx context.Context, in *SqlOperationsCancelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sqlOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlOperationsServiceClient(cc grpc.ClientConnInterface) SqlOperationsServiceClient {
	return &sqlOperationsServiceClient{cc}
}

func (c *sqlOperationsServiceClient) Get(ctx context.Context, in *SqlOperationsGetRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlOperationsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlOperationsServiceClient) List(ctx context.Context, in *SqlOperationsListRequest, opts ...grpc.CallOption) (*OperationsListResponse, error) {
	out := new(OperationsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlOperationsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlOperationsServiceClient) Cancel(ctx context.Context, in *SqlOperationsCancelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlOperationsService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlOperationsServiceServer is the server API for SqlOperationsService service.
// All implementations must embed UnimplementedSqlOperationsServiceServer
// for forward compatibility
type SqlOperationsServiceServer interface {
	// Retrieves an instance operation that has been performed on an instance.
	Get(context.Context, *SqlOperationsGetRequest) (*Operation, error)
	// Lists all instance operations that have been performed on the given Cloud
	// SQL instance in the reverse chronological order of the start time.
	List(context.Context, *SqlOperationsListRequest) (*OperationsListResponse, error)
	// Cancels an instance operation that has been performed on an instance.
	Cancel(context.Context, *SqlOperationsCancelRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSqlOperationsServiceServer()
}

// UnimplementedSqlOperationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlOperationsServiceServer struct {
}

func (UnimplementedSqlOperationsServiceServer) Get(context.Context, *SqlOperationsGetRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlOperationsServiceServer) List(context.Context, *SqlOperationsListRequest) (*OperationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlOperationsServiceServer) Cancel(context.Context, *SqlOperationsCancelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedSqlOperationsServiceServer) mustEmbedUnimplementedSqlOperationsServiceServer() {}

// UnsafeSqlOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlOperationsServiceServer will
// result in compilation errors.
type UnsafeSqlOperationsServiceServer interface {
	mustEmbedUnimplementedSqlOperationsServiceServer()
}

func RegisterSqlOperationsServiceServer(s grpc.ServiceRegistrar, srv SqlOperationsServiceServer) {
	s.RegisterService(&SqlOperationsService_ServiceDesc, srv)
}

func _SqlOperationsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlOperationsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).Get(ctx, req.(*SqlOperationsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlOperationsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlOperationsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).List(ctx, req.(*SqlOperationsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlOperationsService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlOperationsService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).Cancel(ctx, req.(*SqlOperationsCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlOperationsService_ServiceDesc is the grpc.ServiceDesc for SqlOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1.SqlOperationsService",
	HandlerType: (*SqlOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SqlOperationsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlOperationsService_List_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _SqlOperationsService_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1/cloud_sql_operations.proto",
}
