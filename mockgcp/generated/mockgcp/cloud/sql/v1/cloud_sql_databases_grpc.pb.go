// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_databases.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlDatabasesServiceClient is the client API for SqlDatabasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlDatabasesServiceClient interface {
	// Deletes a database from a Cloud SQL instance.
	Delete(ctx context.Context, in *SqlDatabasesDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a database inside a Cloud
	// SQL instance.
	Get(ctx context.Context, in *SqlDatabasesGetRequest, opts ...grpc.CallOption) (*Database, error)
	// Inserts a resource containing information about a database inside a Cloud
	// SQL instance.
	//
	// **Note:** You can't modify the default character set and collation.
	Insert(ctx context.Context, in *SqlDatabasesInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists databases in the specified Cloud SQL instance.
	List(ctx context.Context, in *SqlDatabasesListRequest, opts ...grpc.CallOption) (*DatabasesListResponse, error)
	// Partially updates a resource containing information about a database inside
	// a Cloud SQL instance. This method supports patch semantics.
	Patch(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
	// Updates a resource containing information about a database inside a Cloud
	// SQL instance.
	Update(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
}

type sqlDatabasesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlDatabasesServiceClient(cc grpc.ClientConnInterface) SqlDatabasesServiceClient {
	return &sqlDatabasesServiceClient{cc}
}

func (c *sqlDatabasesServiceClient) Delete(ctx context.Context, in *SqlDatabasesDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Get(ctx context.Context, in *SqlDatabasesGetRequest, opts ...grpc.CallOption) (*Database, error) {
	out := new(Database)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Insert(ctx context.Context, in *SqlDatabasesInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) List(ctx context.Context, in *SqlDatabasesListRequest, opts ...grpc.CallOption) (*DatabasesListResponse, error) {
	out := new(DatabasesListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Patch(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Update(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1.SqlDatabasesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlDatabasesServiceServer is the server API for SqlDatabasesService service.
// All implementations must embed UnimplementedSqlDatabasesServiceServer
// for forward compatibility
type SqlDatabasesServiceServer interface {
	// Deletes a database from a Cloud SQL instance.
	Delete(context.Context, *SqlDatabasesDeleteRequest) (*Operation, error)
	// Retrieves a resource containing information about a database inside a Cloud
	// SQL instance.
	Get(context.Context, *SqlDatabasesGetRequest) (*Database, error)
	// Inserts a resource containing information about a database inside a Cloud
	// SQL instance.
	//
	// **Note:** You can't modify the default character set and collation.
	Insert(context.Context, *SqlDatabasesInsertRequest) (*Operation, error)
	// Lists databases in the specified Cloud SQL instance.
	List(context.Context, *SqlDatabasesListRequest) (*DatabasesListResponse, error)
	// Partially updates a resource containing information about a database inside
	// a Cloud SQL instance. This method supports patch semantics.
	Patch(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error)
	// Updates a resource containing information about a database inside a Cloud
	// SQL instance.
	Update(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error)
	mustEmbedUnimplementedSqlDatabasesServiceServer()
}

// UnimplementedSqlDatabasesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlDatabasesServiceServer struct {
}

func (UnimplementedSqlDatabasesServiceServer) Delete(context.Context, *SqlDatabasesDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Get(context.Context, *SqlDatabasesGetRequest) (*Database, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Insert(context.Context, *SqlDatabasesInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) List(context.Context, *SqlDatabasesListRequest) (*DatabasesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Patch(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Update(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) mustEmbedUnimplementedSqlDatabasesServiceServer() {}

// UnsafeSqlDatabasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlDatabasesServiceServer will
// result in compilation errors.
type UnsafeSqlDatabasesServiceServer interface {
	mustEmbedUnimplementedSqlDatabasesServiceServer()
}

func RegisterSqlDatabasesServiceServer(s grpc.ServiceRegistrar, srv SqlDatabasesServiceServer) {
	s.RegisterService(&SqlDatabasesService_ServiceDesc, srv)
}

func _SqlDatabasesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Delete(ctx, req.(*SqlDatabasesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Get(ctx, req.(*SqlDatabasesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Insert(ctx, req.(*SqlDatabasesInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).List(ctx, req.(*SqlDatabasesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Patch(ctx, req.(*SqlDatabasesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1.SqlDatabasesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Update(ctx, req.(*SqlDatabasesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlDatabasesService_ServiceDesc is the grpc.ServiceDesc for SqlDatabasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlDatabasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1.SqlDatabasesService",
	HandlerType: (*SqlDatabasesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlDatabasesService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlDatabasesService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlDatabasesService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlDatabasesService_List_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SqlDatabasesService_Patch_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SqlDatabasesService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1/cloud_sql_databases.proto",
}
