// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/sql/v1/cloud_sql_instances.proto

package sqlpb

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// External Sync parallel level.
type ExternalSyncParallelLevel int32

const (
	// Unknown sync parallel level. Will be defaulted to OPTIMAL.
	ExternalSyncParallelLevel_EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED ExternalSyncParallelLevel = 0
	// Minimal parallel level.
	ExternalSyncParallelLevel_MIN ExternalSyncParallelLevel = 1
	// Optimal parallel level.
	ExternalSyncParallelLevel_OPTIMAL ExternalSyncParallelLevel = 2
	// Maximum parallel level.
	ExternalSyncParallelLevel_MAX ExternalSyncParallelLevel = 3
)

// Enum value maps for ExternalSyncParallelLevel.
var (
	ExternalSyncParallelLevel_name = map[int32]string{
		0: "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED",
		1: "MIN",
		2: "OPTIMAL",
		3: "MAX",
	}
	ExternalSyncParallelLevel_value = map[string]int32{
		"EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED": 0,
		"MIN":     1,
		"OPTIMAL": 2,
		"MAX":     3,
	}
)

func (x ExternalSyncParallelLevel) Enum() *ExternalSyncParallelLevel {
	p := new(ExternalSyncParallelLevel)
	*p = x
	return p
}

func (x ExternalSyncParallelLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSyncParallelLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[0].Descriptor()
}

func (ExternalSyncParallelLevel) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[0]
}

func (x ExternalSyncParallelLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSyncParallelLevel.Descriptor instead.
func (ExternalSyncParallelLevel) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{0}
}

type SqlInstanceType int32

const (
	// This is an unknown Cloud SQL instance type.
	SqlInstanceType_SQL_INSTANCE_TYPE_UNSPECIFIED SqlInstanceType = 0
	// A regular Cloud SQL instance that is not replicating from a primary
	// instance.
	SqlInstanceType_CLOUD_SQL_INSTANCE SqlInstanceType = 1
	// An instance running on the customer's premises that is not managed by
	// Cloud SQL.
	SqlInstanceType_ON_PREMISES_INSTANCE SqlInstanceType = 2
	// A Cloud SQL instance acting as a read-replica.
	SqlInstanceType_READ_REPLICA_INSTANCE SqlInstanceType = 3
)

// Enum value maps for SqlInstanceType.
var (
	SqlInstanceType_name = map[int32]string{
		0: "SQL_INSTANCE_TYPE_UNSPECIFIED",
		1: "CLOUD_SQL_INSTANCE",
		2: "ON_PREMISES_INSTANCE",
		3: "READ_REPLICA_INSTANCE",
	}
	SqlInstanceType_value = map[string]int32{
		"SQL_INSTANCE_TYPE_UNSPECIFIED": 0,
		"CLOUD_SQL_INSTANCE":            1,
		"ON_PREMISES_INSTANCE":          2,
		"READ_REPLICA_INSTANCE":         3,
	}
)

func (x SqlInstanceType) Enum() *SqlInstanceType {
	p := new(SqlInstanceType)
	*p = x
	return p
}

func (x SqlInstanceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlInstanceType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[1].Descriptor()
}

func (SqlInstanceType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[1]
}

func (x SqlInstanceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlInstanceType.Descriptor instead.
func (SqlInstanceType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{1}
}

// The suspension reason of the database instance if the state is SUSPENDED.
type SqlSuspensionReason int32

const (
	// This is an unknown suspension reason.
	SqlSuspensionReason_SQL_SUSPENSION_REASON_UNSPECIFIED SqlSuspensionReason = 0
	// The instance is suspended due to billing issues (for example:, GCP account
	// issue)
	SqlSuspensionReason_BILLING_ISSUE SqlSuspensionReason = 2
	// The instance is suspended due to illegal content (for example:, child
	// pornography, copyrighted material, etc.).
	SqlSuspensionReason_LEGAL_ISSUE SqlSuspensionReason = 3
	// The instance is causing operational issues (for example:, causing the
	// database to crash).
	SqlSuspensionReason_OPERATIONAL_ISSUE SqlSuspensionReason = 4
	// The KMS key used by the instance is either revoked or denied access to
	SqlSuspensionReason_KMS_KEY_ISSUE SqlSuspensionReason = 5
)

// Enum value maps for SqlSuspensionReason.
var (
	SqlSuspensionReason_name = map[int32]string{
		0: "SQL_SUSPENSION_REASON_UNSPECIFIED",
		2: "BILLING_ISSUE",
		3: "LEGAL_ISSUE",
		4: "OPERATIONAL_ISSUE",
		5: "KMS_KEY_ISSUE",
	}
	SqlSuspensionReason_value = map[string]int32{
		"SQL_SUSPENSION_REASON_UNSPECIFIED": 0,
		"BILLING_ISSUE":                     2,
		"LEGAL_ISSUE":                       3,
		"OPERATIONAL_ISSUE":                 4,
		"KMS_KEY_ISSUE":                     5,
	}
)

func (x SqlSuspensionReason) Enum() *SqlSuspensionReason {
	p := new(SqlSuspensionReason)
	*p = x
	return p
}

func (x SqlSuspensionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlSuspensionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[2].Descriptor()
}

func (SqlSuspensionReason) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[2]
}

func (x SqlSuspensionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlSuspensionReason.Descriptor instead.
func (SqlSuspensionReason) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{2}
}

// Backup type for re-encryption
type BackupReencryptionConfig_BackupType int32

const (
	// Unknown backup type, will be defaulted to AUTOMATIC backup type
	BackupReencryptionConfig_BACKUP_TYPE_UNSPECIFIED BackupReencryptionConfig_BackupType = 0
	// Reencrypt automatic backups
	BackupReencryptionConfig_AUTOMATED BackupReencryptionConfig_BackupType = 1
	// Reencrypt on-demand backups
	BackupReencryptionConfig_ON_DEMAND BackupReencryptionConfig_BackupType = 2
)

// Enum value maps for BackupReencryptionConfig_BackupType.
var (
	BackupReencryptionConfig_BackupType_name = map[int32]string{
		0: "BACKUP_TYPE_UNSPECIFIED",
		1: "AUTOMATED",
		2: "ON_DEMAND",
	}
	BackupReencryptionConfig_BackupType_value = map[string]int32{
		"BACKUP_TYPE_UNSPECIFIED": 0,
		"AUTOMATED":               1,
		"ON_DEMAND":               2,
	}
)

func (x BackupReencryptionConfig_BackupType) Enum() *BackupReencryptionConfig_BackupType {
	p := new(BackupReencryptionConfig_BackupType)
	*p = x
	return p
}

func (x BackupReencryptionConfig_BackupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupReencryptionConfig_BackupType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[3].Descriptor()
}

func (BackupReencryptionConfig_BackupType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[3]
}

func (x BackupReencryptionConfig_BackupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupReencryptionConfig_BackupType.Descriptor instead.
func (BackupReencryptionConfig_BackupType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{27, 0}
}

type SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode int32

const (
	// Unknown external sync mode, will be defaulted to ONLINE mode
	SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 0
	// Online external sync will set up replication after initial data external
	// sync
	SqlInstancesVerifyExternalSyncSettingsRequest_ONLINE SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 1
	// Offline external sync only dumps and loads a one-time snapshot of
	// the primary instance's data
	SqlInstancesVerifyExternalSyncSettingsRequest_OFFLINE SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 2
)

// Enum value maps for SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.
var (
	SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode_name = map[int32]string{
		0: "EXTERNAL_SYNC_MODE_UNSPECIFIED",
		1: "ONLINE",
		2: "OFFLINE",
	}
	SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode_value = map[string]int32{
		"EXTERNAL_SYNC_MODE_UNSPECIFIED": 0,
		"ONLINE":                         1,
		"OFFLINE":                        2,
	}
)

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Enum() *SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	p := new(SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode)
	*p = x
	return p
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[4].Descriptor()
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[4]
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.Descriptor instead.
func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{29, 0}
}

// The current serving state of the database instance.
type DatabaseInstance_SqlInstanceState int32

const (
	// The state of the instance is unknown.
	DatabaseInstance_SQL_INSTANCE_STATE_UNSPECIFIED DatabaseInstance_SqlInstanceState = 0
	// The instance is running, or has been stopped by owner.
	DatabaseInstance_RUNNABLE DatabaseInstance_SqlInstanceState = 1
	// The instance is not available, for example due to problems with billing.
	DatabaseInstance_SUSPENDED DatabaseInstance_SqlInstanceState = 2
	// The instance is being deleted.
	DatabaseInstance_PENDING_DELETE DatabaseInstance_SqlInstanceState = 3
	// The instance is being created.
	DatabaseInstance_PENDING_CREATE DatabaseInstance_SqlInstanceState = 4
	// The instance is down for maintenance.
	DatabaseInstance_MAINTENANCE DatabaseInstance_SqlInstanceState = 5
	// The creation of the instance failed or a fatal error occurred during
	// maintenance.
	DatabaseInstance_FAILED DatabaseInstance_SqlInstanceState = 6
	// Deprecated
	//
	// Deprecated: Do not use.
	DatabaseInstance_ONLINE_MAINTENANCE DatabaseInstance_SqlInstanceState = 7
)

// Enum value maps for DatabaseInstance_SqlInstanceState.
var (
	DatabaseInstance_SqlInstanceState_name = map[int32]string{
		0: "SQL_INSTANCE_STATE_UNSPECIFIED",
		1: "RUNNABLE",
		2: "SUSPENDED",
		3: "PENDING_DELETE",
		4: "PENDING_CREATE",
		5: "MAINTENANCE",
		6: "FAILED",
		7: "ONLINE_MAINTENANCE",
	}
	DatabaseInstance_SqlInstanceState_value = map[string]int32{
		"SQL_INSTANCE_STATE_UNSPECIFIED": 0,
		"RUNNABLE":                       1,
		"SUSPENDED":                      2,
		"PENDING_DELETE":                 3,
		"PENDING_CREATE":                 4,
		"MAINTENANCE":                    5,
		"FAILED":                         6,
		"ONLINE_MAINTENANCE":             7,
	}
)

func (x DatabaseInstance_SqlInstanceState) Enum() *DatabaseInstance_SqlInstanceState {
	p := new(DatabaseInstance_SqlInstanceState)
	*p = x
	return p
}

func (x DatabaseInstance_SqlInstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseInstance_SqlInstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[5].Descriptor()
}

func (DatabaseInstance_SqlInstanceState) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[5]
}

func (x DatabaseInstance_SqlInstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseInstance_SqlInstanceState.Descriptor instead.
func (DatabaseInstance_SqlInstanceState) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 0}
}

// The SQL network architecture for the instance.
type DatabaseInstance_SqlNetworkArchitecture int32

const (
	DatabaseInstance_SQL_NETWORK_ARCHITECTURE_UNSPECIFIED DatabaseInstance_SqlNetworkArchitecture = 0
	// The instance uses the new network architecture.
	DatabaseInstance_NEW_NETWORK_ARCHITECTURE DatabaseInstance_SqlNetworkArchitecture = 1
	// The instance uses the old network architecture.
	DatabaseInstance_OLD_NETWORK_ARCHITECTURE DatabaseInstance_SqlNetworkArchitecture = 2
)

// Enum value maps for DatabaseInstance_SqlNetworkArchitecture.
var (
	DatabaseInstance_SqlNetworkArchitecture_name = map[int32]string{
		0: "SQL_NETWORK_ARCHITECTURE_UNSPECIFIED",
		1: "NEW_NETWORK_ARCHITECTURE",
		2: "OLD_NETWORK_ARCHITECTURE",
	}
	DatabaseInstance_SqlNetworkArchitecture_value = map[string]int32{
		"SQL_NETWORK_ARCHITECTURE_UNSPECIFIED": 0,
		"NEW_NETWORK_ARCHITECTURE":             1,
		"OLD_NETWORK_ARCHITECTURE":             2,
	}
)

func (x DatabaseInstance_SqlNetworkArchitecture) Enum() *DatabaseInstance_SqlNetworkArchitecture {
	p := new(DatabaseInstance_SqlNetworkArchitecture)
	*p = x
	return p
}

func (x DatabaseInstance_SqlNetworkArchitecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseInstance_SqlNetworkArchitecture) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[6].Descriptor()
}

func (DatabaseInstance_SqlNetworkArchitecture) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[6]
}

func (x DatabaseInstance_SqlNetworkArchitecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseInstance_SqlNetworkArchitecture.Descriptor instead.
func (DatabaseInstance_SqlNetworkArchitecture) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 1}
}

// This enum lists all possible states regarding out-of-disk issues.
type DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState int32

const (
	// Unspecified state
	DatabaseInstance_SqlOutOfDiskReport_SQL_OUT_OF_DISK_STATE_UNSPECIFIED DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState = 0
	// The instance has plenty space on data disk
	DatabaseInstance_SqlOutOfDiskReport_NORMAL DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState = 1
	// Data disk is almost used up. It is shutdown to prevent data
	// corruption.
	DatabaseInstance_SqlOutOfDiskReport_SOFT_SHUTDOWN DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState = 2
)

// Enum value maps for DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState.
var (
	DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState_name = map[int32]string{
		0: "SQL_OUT_OF_DISK_STATE_UNSPECIFIED",
		1: "NORMAL",
		2: "SOFT_SHUTDOWN",
	}
	DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState_value = map[string]int32{
		"SQL_OUT_OF_DISK_STATE_UNSPECIFIED": 0,
		"NORMAL":                            1,
		"SOFT_SHUTDOWN":                     2,
	}
)

func (x DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) Enum() *DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState {
	p := new(DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState)
	*p = x
	return p
}

func (x DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[7].Descriptor()
}

func (DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[7]
}

func (x DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState.Descriptor instead.
func (DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 2, 0}
}

type SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType int32

const (
	SqlInstancesRescheduleMaintenanceRequestBody_RESCHEDULE_TYPE_UNSPECIFIED SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType = 0
	// Reschedules maintenance to happen now (within 5 minutes).
	SqlInstancesRescheduleMaintenanceRequestBody_IMMEDIATE SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType = 1
	// Reschedules maintenance to occur within one week from the originally
	// scheduled day and time.
	SqlInstancesRescheduleMaintenanceRequestBody_NEXT_AVAILABLE_WINDOW SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType = 2
	// Reschedules maintenance to a specific time and day.
	SqlInstancesRescheduleMaintenanceRequestBody_SPECIFIC_TIME SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType = 3
)

// Enum value maps for SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType.
var (
	SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) Enum() *SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType {
	p := new(SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType)
	*p = x
	return p
}

func (x SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[8].Descriptor()
}

func (SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[8]
}

func (x SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType.Descriptor instead.
func (SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{52, 0}
}

type SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType int32

const (
	SqlExternalSyncSettingError_SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 0
	SqlExternalSyncSettingError_CONNECTION_FAILURE                               SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 1
	SqlExternalSyncSettingError_BINLOG_NOT_ENABLED                               SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 2
	SqlExternalSyncSettingError_INCOMPATIBLE_DATABASE_VERSION                    SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 3
	SqlExternalSyncSettingError_REPLICA_ALREADY_SETUP                            SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 4
	// The replication user is missing privileges that are required.
	SqlExternalSyncSettingError_INSUFFICIENT_PRIVILEGE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 5
	// Unsupported migration type.
	SqlExternalSyncSettingError_UNSUPPORTED_MIGRATION_TYPE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 6
	// No pglogical extension installed on databases, applicable for postgres.
	SqlExternalSyncSettingError_NO_PGLOGICAL_INSTALLED SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 7
	// pglogical node already exists on databases, applicable for postgres.
	SqlExternalSyncSettingError_PGLOGICAL_NODE_ALREADY_EXISTS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 8
	// The value of parameter wal_level is not set to logical.
	SqlExternalSyncSettingError_INVALID_WAL_LEVEL SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 9
	// The value of parameter shared_preload_libraries does not include
	// pglogical.
	SqlExternalSyncSettingError_INVALID_SHARED_PRELOAD_LIBRARY SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 10
	// The value of parameter max_replication_slots is not sufficient.
	SqlExternalSyncSettingError_INSUFFICIENT_MAX_REPLICATION_SLOTS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 11
	// The value of parameter max_wal_senders is not sufficient.
	SqlExternalSyncSettingError_INSUFFICIENT_MAX_WAL_SENDERS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 12
	// The value of parameter max_worker_processes is not sufficient.
	SqlExternalSyncSettingError_INSUFFICIENT_MAX_WORKER_PROCESSES SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 13
	// Extensions installed are either not supported or having unsupported
	// versions.
	SqlExternalSyncSettingError_UNSUPPORTED_EXTENSIONS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 14
	// The value of parameter rds.logical_replication is not set to 1.
	SqlExternalSyncSettingError_INVALID_RDS_LOGICAL_REPLICATION SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 15
	// The primary instance logging setup doesn't allow EM sync.
	SqlExternalSyncSettingError_INVALID_LOGGING_SETUP SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 16
	// The primary instance database parameter setup doesn't allow EM sync.
	SqlExternalSyncSettingError_INVALID_DB_PARAM SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 17
	// The gtid_mode is not supported, applicable for MySQL.
	SqlExternalSyncSettingError_UNSUPPORTED_GTID_MODE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 18
	// SQL Server Agent is not running.
	SqlExternalSyncSettingError_SQLSERVER_AGENT_NOT_RUNNING SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 19
	// The table definition is not support due to missing primary key or replica
	// identity, applicable for postgres.
	SqlExternalSyncSettingError_UNSUPPORTED_TABLE_DEFINITION SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 20
	// The customer has a definer that will break EM setup.
	SqlExternalSyncSettingError_UNSUPPORTED_DEFINER SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 21
	// SQL Server @@SERVERNAME does not match actual host name.
	SqlExternalSyncSettingError_SQLSERVER_SERVERNAME_MISMATCH SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 22
	// The primary instance has been setup and will fail the setup.
	SqlExternalSyncSettingError_PRIMARY_ALREADY_SETUP SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 23
	// The primary instance has unsupported binary log format.
	SqlExternalSyncSettingError_UNSUPPORTED_BINLOG_FORMAT SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 24
	// The primary instance's binary log retention setting.
	SqlExternalSyncSettingError_BINLOG_RETENTION_SETTING SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 25
	// The primary instance has tables with unsupported storage engine.
	SqlExternalSyncSettingError_UNSUPPORTED_STORAGE_ENGINE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 26
	// Source has tables with limited support
	// eg: PostgreSQL tables without primary keys.
	SqlExternalSyncSettingError_LIMITED_SUPPORT_TABLES SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 27
	// The replica instance contains existing data.
	SqlExternalSyncSettingError_EXISTING_DATA_IN_REPLICA SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 28
	// The replication user is missing privileges that are optional.
	SqlExternalSyncSettingError_MISSING_OPTIONAL_PRIVILEGES SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 29
	// Additional BACKUP_ADMIN privilege is granted to the replication user
	// which may lock source MySQL 8 instance for DDLs during initial sync.
	SqlExternalSyncSettingError_RISKY_BACKUP_ADMIN_PRIVILEGE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 30
	// The Cloud Storage bucket is missing necessary permissions.
	SqlExternalSyncSettingError_INSUFFICIENT_GCS_PERMISSIONS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 31
	// The Cloud Storage bucket has an error in the file or contains invalid
	// file information.
	SqlExternalSyncSettingError_INVALID_FILE_INFO SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 32
	// The source instance has unsupported database settings for migration.
	SqlExternalSyncSettingError_UNSUPPORTED_DATABASE_SETTINGS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 33
	// The replication user is missing parallel import specific privileges.
	// (e.g. LOCK TABLES) for MySQL.
	SqlExternalSyncSettingError_MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 34
	// The global variable local_infile is off on external server replica.
	SqlExternalSyncSettingError_LOCAL_INFILE_OFF SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 35
	// This code instructs customers to turn on point-in-time recovery manually
	// for the instance after promoting the Cloud SQL for PostgreSQL instance.
	SqlExternalSyncSettingError_TURN_ON_PITR_AFTER_PROMOTE SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 36
	// The minor version of replica database is incompatible with the source.
	SqlExternalSyncSettingError_INCOMPATIBLE_DATABASE_MINOR_VERSION SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 37
	// This warning message indicates that Cloud SQL uses the maximum number of
	// subscriptions to migrate data from the source to the destination.
	SqlExternalSyncSettingError_SOURCE_MAX_SUBSCRIPTIONS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 38
	// Unable to verify definers on the source for MySQL.
	SqlExternalSyncSettingError_UNABLE_TO_VERIFY_DEFINERS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 39
	// If a time out occurs while the subscription counts are calculated, then
	// this value is set to 1. Otherwise, this value is set to 2.
	SqlExternalSyncSettingError_SUBSCRIPTION_CALCULATION_STATUS SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType = 40
)

// Enum value maps for SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType.
var (
	SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType_name = map[int32]string{
		0:  "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED",
		1:  "CONNECTION_FAILURE",
		2:  "BINLOG_NOT_ENABLED",
		3:  "INCOMPATIBLE_DATABASE_VERSION",
		4:  "REPLICA_ALREADY_SETUP",
		5:  "INSUFFICIENT_PRIVILEGE",
		6:  "UNSUPPORTED_MIGRATION_TYPE",
		7:  "NO_PGLOGICAL_INSTALLED",
		8:  "PGLOGICAL_NODE_ALREADY_EXISTS",
		9:  "INVALID_WAL_LEVEL",
		10: "INVALID_SHARED_PRELOAD_LIBRARY",
		11: "INSUFFICIENT_MAX_REPLICATION_SLOTS",
		12: "INSUFFICIENT_MAX_WAL_SENDERS",
		13: "INSUFFICIENT_MAX_WORKER_PROCESSES",
		14: "UNSUPPORTED_EXTENSIONS",
		15: "INVALID_RDS_LOGICAL_REPLICATION",
		16: "INVALID_LOGGING_SETUP",
		17: "INVALID_DB_PARAM",
		18: "UNSUPPORTED_GTID_MODE",
		19: "SQLSERVER_AGENT_NOT_RUNNING",
		20: "UNSUPPORTED_TABLE_DEFINITION",
		21: "UNSUPPORTED_DEFINER",
		22: "SQLSERVER_SERVERNAME_MISMATCH",
		23: "PRIMARY_ALREADY_SETUP",
		24: "UNSUPPORTED_BINLOG_FORMAT",
		25: "BINLOG_RETENTION_SETTING",
		26: "UNSUPPORTED_STORAGE_ENGINE",
		27: "LIMITED_SUPPORT_TABLES",
		28: "EXISTING_DATA_IN_REPLICA",
		29: "MISSING_OPTIONAL_PRIVILEGES",
		30: "RISKY_BACKUP_ADMIN_PRIVILEGE",
		31: "INSUFFICIENT_GCS_PERMISSIONS",
		32: "INVALID_FILE_INFO",
		33: "UNSUPPORTED_DATABASE_SETTINGS",
		34: "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE",
		35: "LOCAL_INFILE_OFF",
		36: "TURN_ON_PITR_AFTER_PROMOTE",
		37: "INCOMPATIBLE_DATABASE_MINOR_VERSION",
		38: "SOURCE_MAX_SUBSCRIPTIONS",
		39: "UNABLE_TO_VERIFY_DEFINERS",
		40: "SUBSCRIPTION_CALCULATION_STATUS",
	}
	SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType_value = map[string]int32{
		"SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED": 0,
		"CONNECTION_FAILURE":                           1,
		"BINLOG_NOT_ENABLED":                           2,
		"INCOMPATIBLE_DATABASE_VERSION":                3,
		"REPLICA_ALREADY_SETUP":                        4,
		"INSUFFICIENT_PRIVILEGE":                       5,
		"UNSUPPORTED_MIGRATION_TYPE":                   6,
		"NO_PGLOGICAL_INSTALLED":                       7,
		"PGLOGICAL_NODE_ALREADY_EXISTS":                8,
		"INVALID_WAL_LEVEL":                            9,
		"INVALID_SHARED_PRELOAD_LIBRARY":               10,
		"INSUFFICIENT_MAX_REPLICATION_SLOTS":           11,
		"INSUFFICIENT_MAX_WAL_SENDERS":                 12,
		"INSUFFICIENT_MAX_WORKER_PROCESSES":            13,
		"UNSUPPORTED_EXTENSIONS":                       14,
		"INVALID_RDS_LOGICAL_REPLICATION":              15,
		"INVALID_LOGGING_SETUP":                        16,
		"INVALID_DB_PARAM":                             17,
		"UNSUPPORTED_GTID_MODE":                        18,
		"SQLSERVER_AGENT_NOT_RUNNING":                  19,
		"UNSUPPORTED_TABLE_DEFINITION":                 20,
		"UNSUPPORTED_DEFINER":                          21,
		"SQLSERVER_SERVERNAME_MISMATCH":                22,
		"PRIMARY_ALREADY_SETUP":                        23,
		"UNSUPPORTED_BINLOG_FORMAT":                    24,
		"BINLOG_RETENTION_SETTING":                     25,
		"UNSUPPORTED_STORAGE_ENGINE":                   26,
		"LIMITED_SUPPORT_TABLES":                       27,
		"EXISTING_DATA_IN_REPLICA":                     28,
		"MISSING_OPTIONAL_PRIVILEGES":                  29,
		"RISKY_BACKUP_ADMIN_PRIVILEGE":                 30,
		"INSUFFICIENT_GCS_PERMISSIONS":                 31,
		"INVALID_FILE_INFO":                            32,
		"UNSUPPORTED_DATABASE_SETTINGS":                33,
		"MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE": 34,
		"LOCAL_INFILE_OFF":                             35,
		"TURN_ON_PITR_AFTER_PROMOTE":                   36,
		"INCOMPATIBLE_DATABASE_MINOR_VERSION":          37,
		"SOURCE_MAX_SUBSCRIPTIONS":                     38,
		"UNABLE_TO_VERIFY_DEFINERS":                    39,
		"SUBSCRIPTION_CALCULATION_STATUS":              40,
	}
)

func (x SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) Enum() *SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType {
	p := new(SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType)
	*p = x
	return p
}

func (x SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[9].Descriptor()
}

func (SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes[9]
}

func (x SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType.Descriptor instead.
func (SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{59, 0}
}

// Instance add server CA request.
type SqlInstancesAddServerCaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesAddServerCaRequest) Reset() {
	*x = SqlInstancesAddServerCaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesAddServerCaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesAddServerCaRequest) ProtoMessage() {}

func (x *SqlInstancesAddServerCaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesAddServerCaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesAddServerCaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{0}
}

func (x *SqlInstancesAddServerCaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesAddServerCaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance clone request.
type SqlInstancesCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Cloud SQL instance to be cloned (source). This does not
	// include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the source as well as the clone Cloud SQL instance.
	Project string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesCloneRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesCloneRequest) Reset() {
	*x = SqlInstancesCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesCloneRequest) ProtoMessage() {}

func (x *SqlInstancesCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesCloneRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesCloneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{1}
}

func (x *SqlInstancesCloneRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesCloneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesCloneRequest) GetBody() *InstancesCloneRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance delete request.
type SqlInstancesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be deleted.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesDeleteRequest) Reset() {
	*x = SqlInstancesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDeleteRequest) ProtoMessage() {}

func (x *SqlInstancesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDeleteRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{2}
}

func (x *SqlInstancesDeleteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance demote master request.
type SqlInstancesDemoteMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string                        `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesDemoteMasterRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesDemoteMasterRequest) Reset() {
	*x = SqlInstancesDemoteMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDemoteMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDemoteMasterRequest) ProtoMessage() {}

func (x *SqlInstancesDemoteMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDemoteMasterRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDemoteMasterRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{3}
}

func (x *SqlInstancesDemoteMasterRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDemoteMasterRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesDemoteMasterRequest) GetBody() *InstancesDemoteMasterRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance demote request.
type SqlInstancesDemoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud SQL instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Required. ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Required. The request body.
	Body *InstancesDemoteRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesDemoteRequest) Reset() {
	*x = SqlInstancesDemoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDemoteRequest) ProtoMessage() {}

func (x *SqlInstancesDemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDemoteRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDemoteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{4}
}

func (x *SqlInstancesDemoteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDemoteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesDemoteRequest) GetBody() *InstancesDemoteRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance export request.
type SqlInstancesExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be exported.
	Project string                  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesExportRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesExportRequest) Reset() {
	*x = SqlInstancesExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesExportRequest) ProtoMessage() {}

func (x *SqlInstancesExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesExportRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{5}
}

func (x *SqlInstancesExportRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesExportRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesExportRequest) GetBody() *InstancesExportRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance failover request.
type SqlInstancesFailoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string                    `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesFailoverRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesFailoverRequest) Reset() {
	*x = SqlInstancesFailoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesFailoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesFailoverRequest) ProtoMessage() {}

func (x *SqlInstancesFailoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesFailoverRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesFailoverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{6}
}

func (x *SqlInstancesFailoverRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesFailoverRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesFailoverRequest) GetBody() *InstancesFailoverRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance get request.
type SqlInstancesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetRequest) Reset() {
	*x = SqlInstancesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetRequest) ProtoMessage() {}

func (x *SqlInstancesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{7}
}

func (x *SqlInstancesGetRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance import request.
type SqlInstancesImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesImportRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesImportRequest) Reset() {
	*x = SqlInstancesImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesImportRequest) ProtoMessage() {}

func (x *SqlInstancesImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesImportRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesImportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{8}
}

func (x *SqlInstancesImportRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesImportRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesImportRequest) GetBody() *InstancesImportRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance insert request.
type SqlInstancesInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project ID of the project to which the newly created Cloud SQL instances
	// should belong.
	Project string            `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesInsertRequest) Reset() {
	*x = SqlInstancesInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesInsertRequest) ProtoMessage() {}

func (x *SqlInstancesInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesInsertRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesInsertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{9}
}

func (x *SqlInstancesInsertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesInsertRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance list request.
type SqlInstancesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter expression that filters resources listed in the response.
	// The expression is in the form of field:value. For example,
	// 'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per
	// their JSON representation, such as 'settings.userLabels.auto_start:true'.
	//
	// Multiple filter queries are space-separated. For example.
	// 'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each
	// expression is an AND expression. However, you can include AND and OR
	// expressions explicitly.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of instances to return. The service may return fewer
	// than this value.
	// If unspecified, at most 500 instances are returned.
	// The maximum value is 1000; values above 1000 are coerced to 1000.
	MaxResults uint32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// A previously-returned page token representing part of the larger set of
	// results to view.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Project ID of the project for which to list Cloud SQL instances.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesListRequest) Reset() {
	*x = SqlInstancesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesListRequest) ProtoMessage() {}

func (x *SqlInstancesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesListRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{10}
}

func (x *SqlInstancesListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *SqlInstancesListRequest) GetMaxResults() uint32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *SqlInstancesListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SqlInstancesListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance list server CAs request.
type SqlInstancesListServerCasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesListServerCasRequest) Reset() {
	*x = SqlInstancesListServerCasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesListServerCasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesListServerCasRequest) ProtoMessage() {}

func (x *SqlInstancesListServerCasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesListServerCasRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesListServerCasRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{11}
}

func (x *SqlInstancesListServerCasRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesListServerCasRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance patch request.
type SqlInstancesPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesPatchRequest) Reset() {
	*x = SqlInstancesPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPatchRequest) ProtoMessage() {}

func (x *SqlInstancesPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPatchRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPatchRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{12}
}

func (x *SqlInstancesPatchRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPatchRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPatchRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance promote replica request.
type SqlInstancesPromoteReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Set to true if the promote operation should attempt to re-add the original
	// primary as a replica when it comes back online. Otherwise, if this value is
	// false or not set, the original primary will be a standalone instance.
	Failover bool `protobuf:"varint,3,opt,name=failover,proto3" json:"failover,omitempty"`
}

func (x *SqlInstancesPromoteReplicaRequest) Reset() {
	*x = SqlInstancesPromoteReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPromoteReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPromoteReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesPromoteReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPromoteReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPromoteReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{13}
}

func (x *SqlInstancesPromoteReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPromoteReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPromoteReplicaRequest) GetFailover() bool {
	if x != nil {
		return x.Failover
	}
	return false
}

// Instance switchover request.
type SqlInstancesSwitchoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. (MySQL only) Cloud SQL instance operations timeout, which is a
	// sum of all database operations. Default value is 10 minutes and can be
	// modified to a maximum value of 24 hours.
	DbTimeout *duration.Duration `protobuf:"bytes,3,opt,name=db_timeout,json=dbTimeout,proto3" json:"db_timeout,omitempty"`
}

func (x *SqlInstancesSwitchoverRequest) Reset() {
	*x = SqlInstancesSwitchoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesSwitchoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesSwitchoverRequest) ProtoMessage() {}

func (x *SqlInstancesSwitchoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesSwitchoverRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesSwitchoverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{14}
}

func (x *SqlInstancesSwitchoverRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesSwitchoverRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesSwitchoverRequest) GetDbTimeout() *duration.Duration {
	if x != nil {
		return x.DbTimeout
	}
	return nil
}

// Instance reset SSL config request.
type SqlInstancesResetSslConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesResetSslConfigRequest) Reset() {
	*x = SqlInstancesResetSslConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesResetSslConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesResetSslConfigRequest) ProtoMessage() {}

func (x *SqlInstancesResetSslConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesResetSslConfigRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesResetSslConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{15}
}

func (x *SqlInstancesResetSslConfigRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesResetSslConfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance restart request.
type SqlInstancesRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be restarted.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesRestartRequest) Reset() {
	*x = SqlInstancesRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRestartRequest) ProtoMessage() {}

func (x *SqlInstancesRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRestartRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRestartRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{16}
}

func (x *SqlInstancesRestartRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRestartRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance restore backup request.
type SqlInstancesRestoreBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                         `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesRestoreBackupRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRestoreBackupRequest) Reset() {
	*x = SqlInstancesRestoreBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRestoreBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRestoreBackupRequest) ProtoMessage() {}

func (x *SqlInstancesRestoreBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRestoreBackupRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRestoreBackupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{17}
}

func (x *SqlInstancesRestoreBackupRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRestoreBackupRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRestoreBackupRequest) GetBody() *InstancesRestoreBackupRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance rotate server CA request.
type SqlInstancesRotateServerCaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesRotateServerCaRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRotateServerCaRequest) Reset() {
	*x = SqlInstancesRotateServerCaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRotateServerCaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRotateServerCaRequest) ProtoMessage() {}

func (x *SqlInstancesRotateServerCaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRotateServerCaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRotateServerCaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{18}
}

func (x *SqlInstancesRotateServerCaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRotateServerCaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRotateServerCaRequest) GetBody() *InstancesRotateServerCaRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance start replica request.
type SqlInstancesStartReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesStartReplicaRequest) Reset() {
	*x = SqlInstancesStartReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStartReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStartReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesStartReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStartReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStartReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{19}
}

func (x *SqlInstancesStartReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStartReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance stop replica request.
type SqlInstancesStopReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesStopReplicaRequest) Reset() {
	*x = SqlInstancesStopReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStopReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStopReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesStopReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStopReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStopReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{20}
}

func (x *SqlInstancesStopReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStopReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance truncate log request.
type SqlInstancesTruncateLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the Cloud SQL project.
	Project string                       `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesTruncateLogRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesTruncateLogRequest) Reset() {
	*x = SqlInstancesTruncateLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesTruncateLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesTruncateLogRequest) ProtoMessage() {}

func (x *SqlInstancesTruncateLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesTruncateLogRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesTruncateLogRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{21}
}

func (x *SqlInstancesTruncateLogRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesTruncateLogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesTruncateLogRequest) GetBody() *InstancesTruncateLogRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance perform disk shrink request.
type SqlInstancesPerformDiskShrinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Perform disk shrink context.
	Body *PerformDiskShrinkContext `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesPerformDiskShrinkRequest) Reset() {
	*x = SqlInstancesPerformDiskShrinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPerformDiskShrinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPerformDiskShrinkRequest) ProtoMessage() {}

func (x *SqlInstancesPerformDiskShrinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPerformDiskShrinkRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPerformDiskShrinkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{22}
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetBody() *PerformDiskShrinkContext {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance update request.
type SqlInstancesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesUpdateRequest) Reset() {
	*x = SqlInstancesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesUpdateRequest) ProtoMessage() {}

func (x *SqlInstancesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesUpdateRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{23}
}

func (x *SqlInstancesUpdateRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesUpdateRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance reschedule maintenance request.
type SqlInstancesRescheduleMaintenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string                                        `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *SqlInstancesRescheduleMaintenanceRequestBody `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRescheduleMaintenanceRequest) Reset() {
	*x = SqlInstancesRescheduleMaintenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRescheduleMaintenanceRequest) ProtoMessage() {}

func (x *SqlInstancesRescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{24}
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetBody() *SqlInstancesRescheduleMaintenanceRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance reencrypt request.
type SqlInstancesReencryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Reencrypt body that users request
	Body *InstancesReencryptRequest `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesReencryptRequest) Reset() {
	*x = SqlInstancesReencryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesReencryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesReencryptRequest) ProtoMessage() {}

func (x *SqlInstancesReencryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesReencryptRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesReencryptRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{25}
}

func (x *SqlInstancesReencryptRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesReencryptRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesReencryptRequest) GetBody() *InstancesReencryptRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Database Instance reencrypt request.
type InstancesReencryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration specific to backup re-encryption
	BackupReencryptionConfig *BackupReencryptionConfig `protobuf:"bytes,1,opt,name=backup_reencryption_config,json=backupReencryptionConfig,proto3,oneof" json:"backup_reencryption_config,omitempty"`
}

func (x *InstancesReencryptRequest) Reset() {
	*x = InstancesReencryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesReencryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesReencryptRequest) ProtoMessage() {}

func (x *InstancesReencryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesReencryptRequest.ProtoReflect.Descriptor instead.
func (*InstancesReencryptRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{26}
}

func (x *InstancesReencryptRequest) GetBackupReencryptionConfig() *BackupReencryptionConfig {
	if x != nil {
		return x.BackupReencryptionConfig
	}
	return nil
}

// Backup Reencryption Config
type BackupReencryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup re-encryption limit
	BackupLimit *int32 `protobuf:"varint,1,opt,name=backup_limit,json=backupLimit,proto3,oneof" json:"backup_limit,omitempty"`
	// Type of backups users want to re-encrypt.
	BackupType *BackupReencryptionConfig_BackupType `protobuf:"varint,2,opt,name=backup_type,json=backupType,proto3,enum=mockgcp.cloud.sql.v1.BackupReencryptionConfig_BackupType,oneof" json:"backup_type,omitempty"`
}

func (x *BackupReencryptionConfig) Reset() {
	*x = BackupReencryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupReencryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupReencryptionConfig) ProtoMessage() {}

func (x *BackupReencryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupReencryptionConfig.ProtoReflect.Descriptor instead.
func (*BackupReencryptionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{27}
}

func (x *BackupReencryptionConfig) GetBackupLimit() int32 {
	if x != nil && x.BackupLimit != nil {
		return *x.BackupLimit
	}
	return 0
}

func (x *BackupReencryptionConfig) GetBackupType() BackupReencryptionConfig_BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return BackupReencryptionConfig_BACKUP_TYPE_UNSPECIFIED
}

// Instance get disk shrink config request.
type SqlInstancesGetDiskShrinkConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) Reset() {
	*x = SqlInstancesGetDiskShrinkConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetDiskShrinkConfigRequest) ProtoMessage() {}

func (x *SqlInstancesGetDiskShrinkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetDiskShrinkConfigRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetDiskShrinkConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{28}
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance verify external sync settings request.
type SqlInstancesVerifyExternalSyncSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Flag to enable verifying connection only
	VerifyConnectionOnly bool `protobuf:"varint,3,opt,name=verify_connection_only,json=verifyConnectionOnly,proto3" json:"verify_connection_only,omitempty"`
	// External sync mode
	SyncMode SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode `protobuf:"varint,4,opt,name=sync_mode,json=syncMode,proto3,enum=mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode" json:"sync_mode,omitempty"`
	// Optional. Flag to verify settings required by replication setup only
	VerifyReplicationOnly bool `protobuf:"varint,5,opt,name=verify_replication_only,json=verifyReplicationOnly,proto3" json:"verify_replication_only,omitempty"`
	// Types that are assignable to SyncConfig:
	//
	//	*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig
	SyncConfig isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig `protobuf_oneof:"sync_config"`
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) Reset() {
	*x = SqlInstancesVerifyExternalSyncSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesVerifyExternalSyncSettingsRequest) ProtoMessage() {}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesVerifyExternalSyncSettingsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{29}
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetVerifyConnectionOnly() bool {
	if x != nil {
		return x.VerifyConnectionOnly
	}
	return false
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetSyncMode() SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetVerifyReplicationOnly() bool {
	if x != nil {
		return x.VerifyReplicationOnly
	}
	return false
}

func (m *SqlInstancesVerifyExternalSyncSettingsRequest) GetSyncConfig() isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig {
	if m != nil {
		return m.SyncConfig
	}
	return nil
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetMysqlSyncConfig() *MySqlSyncConfig {
	if x, ok := x.GetSyncConfig().(*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig); ok {
		return x.MysqlSyncConfig
	}
	return nil
}

type isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig interface {
	isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig()
}

type SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig struct {
	// Optional. MySQL-specific settings for start external sync.
	MysqlSyncConfig *MySqlSyncConfig `protobuf:"bytes,6,opt,name=mysql_sync_config,json=mysqlSyncConfig,proto3,oneof"`
}

func (*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig) isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig() {
}

// Instance start external sync request.
type SqlInstancesStartExternalSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// External sync mode.
	SyncMode SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode `protobuf:"varint,3,opt,name=sync_mode,json=syncMode,proto3,enum=mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode" json:"sync_mode,omitempty"`
	// Whether to skip the verification step (VESS).
	SkipVerification bool `protobuf:"varint,4,opt,name=skip_verification,json=skipVerification,proto3" json:"skip_verification,omitempty"`
	// Types that are assignable to SyncConfig:
	//
	//	*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig
	SyncConfig isSqlInstancesStartExternalSyncRequest_SyncConfig `protobuf_oneof:"sync_config"`
	// Optional. Parallel level for initial data sync. Currently only applicable
	// for MySQL.
	SyncParallelLevel ExternalSyncParallelLevel `protobuf:"varint,7,opt,name=sync_parallel_level,json=syncParallelLevel,proto3,enum=mockgcp.cloud.sql.v1.ExternalSyncParallelLevel" json:"sync_parallel_level,omitempty"`
}

func (x *SqlInstancesStartExternalSyncRequest) Reset() {
	*x = SqlInstancesStartExternalSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStartExternalSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStartExternalSyncRequest) ProtoMessage() {}

func (x *SqlInstancesStartExternalSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStartExternalSyncRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStartExternalSyncRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{30}
}

func (x *SqlInstancesStartExternalSyncRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStartExternalSyncRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesStartExternalSyncRequest) GetSyncMode() SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED
}

func (x *SqlInstancesStartExternalSyncRequest) GetSkipVerification() bool {
	if x != nil {
		return x.SkipVerification
	}
	return false
}

func (m *SqlInstancesStartExternalSyncRequest) GetSyncConfig() isSqlInstancesStartExternalSyncRequest_SyncConfig {
	if m != nil {
		return m.SyncConfig
	}
	return nil
}

func (x *SqlInstancesStartExternalSyncRequest) GetMysqlSyncConfig() *MySqlSyncConfig {
	if x, ok := x.GetSyncConfig().(*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig); ok {
		return x.MysqlSyncConfig
	}
	return nil
}

func (x *SqlInstancesStartExternalSyncRequest) GetSyncParallelLevel() ExternalSyncParallelLevel {
	if x != nil {
		return x.SyncParallelLevel
	}
	return ExternalSyncParallelLevel_EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED
}

type isSqlInstancesStartExternalSyncRequest_SyncConfig interface {
	isSqlInstancesStartExternalSyncRequest_SyncConfig()
}

type SqlInstancesStartExternalSyncRequest_MysqlSyncConfig struct {
	// MySQL-specific settings for start external sync.
	MysqlSyncConfig *MySqlSyncConfig `protobuf:"bytes,6,opt,name=mysql_sync_config,json=mysqlSyncConfig,proto3,oneof"`
}

func (*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig) isSqlInstancesStartExternalSyncRequest_SyncConfig() {
}

// Instance reset replica size request.
type SqlInstancesResetReplicaSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesResetReplicaSizeRequest) Reset() {
	*x = SqlInstancesResetReplicaSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesResetReplicaSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesResetReplicaSizeRequest) ProtoMessage() {}

func (x *SqlInstancesResetReplicaSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesResetReplicaSizeRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesResetReplicaSizeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{31}
}

func (x *SqlInstancesResetReplicaSizeRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesResetReplicaSizeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance create ephemeral certificate request.
type SqlInstancesCreateEphemeralCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the Cloud SQL project.
	Project string                          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *SslCertsCreateEphemeralRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesCreateEphemeralCertRequest) Reset() {
	*x = SqlInstancesCreateEphemeralCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesCreateEphemeralCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesCreateEphemeralCertRequest) ProtoMessage() {}

func (x *SqlInstancesCreateEphemeralCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesCreateEphemeralCertRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesCreateEphemeralCertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{32}
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetBody() *SslCertsCreateEphemeralRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Database instance clone request.
type InstancesCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the clone operation.
	CloneContext *CloneContext `protobuf:"bytes,1,opt,name=clone_context,json=cloneContext,proto3" json:"clone_context,omitempty"`
}

func (x *InstancesCloneRequest) Reset() {
	*x = InstancesCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesCloneRequest) ProtoMessage() {}

func (x *InstancesCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesCloneRequest.ProtoReflect.Descriptor instead.
func (*InstancesCloneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{33}
}

func (x *InstancesCloneRequest) GetCloneContext() *CloneContext {
	if x != nil {
		return x.CloneContext
	}
	return nil
}

// Database demote primary instance request.
type InstancesDemoteMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the demoteMaster operation.
	DemoteMasterContext *DemoteMasterContext `protobuf:"bytes,1,opt,name=demote_master_context,json=demoteMasterContext,proto3" json:"demote_master_context,omitempty"`
}

func (x *InstancesDemoteMasterRequest) Reset() {
	*x = InstancesDemoteMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesDemoteMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesDemoteMasterRequest) ProtoMessage() {}

func (x *InstancesDemoteMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesDemoteMasterRequest.ProtoReflect.Descriptor instead.
func (*InstancesDemoteMasterRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{34}
}

func (x *InstancesDemoteMasterRequest) GetDemoteMasterContext() *DemoteMasterContext {
	if x != nil {
		return x.DemoteMasterContext
	}
	return nil
}

// This request is used to demote an existing standalone instance to be a
// Cloud SQL read replica for an external database server.
type InstancesDemoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Contains details about the demote operation.
	DemoteContext *DemoteContext `protobuf:"bytes,1,opt,name=demote_context,json=demoteContext,proto3" json:"demote_context,omitempty"`
}

func (x *InstancesDemoteRequest) Reset() {
	*x = InstancesDemoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesDemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesDemoteRequest) ProtoMessage() {}

func (x *InstancesDemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesDemoteRequest.ProtoReflect.Descriptor instead.
func (*InstancesDemoteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{35}
}

func (x *InstancesDemoteRequest) GetDemoteContext() *DemoteContext {
	if x != nil {
		return x.DemoteContext
	}
	return nil
}

// Database instance export request.
type InstancesExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the export operation.
	ExportContext *ExportContext `protobuf:"bytes,1,opt,name=export_context,json=exportContext,proto3" json:"export_context,omitempty"`
}

func (x *InstancesExportRequest) Reset() {
	*x = InstancesExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesExportRequest) ProtoMessage() {}

func (x *InstancesExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesExportRequest.ProtoReflect.Descriptor instead.
func (*InstancesExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{36}
}

func (x *InstancesExportRequest) GetExportContext() *ExportContext {
	if x != nil {
		return x.ExportContext
	}
	return nil
}

// Instance failover request.
type InstancesFailoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Failover Context.
	FailoverContext *FailoverContext `protobuf:"bytes,1,opt,name=failover_context,json=failoverContext,proto3" json:"failover_context,omitempty"`
}

func (x *InstancesFailoverRequest) Reset() {
	*x = InstancesFailoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesFailoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesFailoverRequest) ProtoMessage() {}

func (x *InstancesFailoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesFailoverRequest.ProtoReflect.Descriptor instead.
func (*InstancesFailoverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{37}
}

func (x *InstancesFailoverRequest) GetFailoverContext() *FailoverContext {
	if x != nil {
		return x.FailoverContext
	}
	return nil
}

// SslCerts create ephemeral certificate request.
type SslCertsCreateEphemeralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PEM encoded public key to include in the signed certificate.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Access token to include in the signed certificate.
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *SslCertsCreateEphemeralRequest) Reset() {
	*x = SslCertsCreateEphemeralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SslCertsCreateEphemeralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SslCertsCreateEphemeralRequest) ProtoMessage() {}

func (x *SslCertsCreateEphemeralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SslCertsCreateEphemeralRequest.ProtoReflect.Descriptor instead.
func (*SslCertsCreateEphemeralRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{38}
}

func (x *SslCertsCreateEphemeralRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SslCertsCreateEphemeralRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// Database instance import request.
type InstancesImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the import operation.
	ImportContext *ImportContext `protobuf:"bytes,1,opt,name=import_context,json=importContext,proto3" json:"import_context,omitempty"`
}

func (x *InstancesImportRequest) Reset() {
	*x = InstancesImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesImportRequest) ProtoMessage() {}

func (x *InstancesImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesImportRequest.ProtoReflect.Descriptor instead.
func (*InstancesImportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{39}
}

func (x *InstancesImportRequest) GetImportContext() *ImportContext {
	if x != nil {
		return x.ImportContext
	}
	return nil
}

// Database instances list response.
type InstancesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#instancesList`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// List of warnings that occurred while handling the request.
	Warnings []*ApiWarning `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// List of database instance resources.
	Items []*DatabaseInstance `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// The continuation token, used to page through large result sets. Provide
	// this value in a subsequent request to return the next page of results.
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *InstancesListResponse) Reset() {
	*x = InstancesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesListResponse) ProtoMessage() {}

func (x *InstancesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesListResponse.ProtoReflect.Descriptor instead.
func (*InstancesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{40}
}

func (x *InstancesListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *InstancesListResponse) GetWarnings() []*ApiWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *InstancesListResponse) GetItems() []*DatabaseInstance {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *InstancesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Instances ListServerCas response.
type InstancesListServerCasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of server CA certificates for the instance.
	Certs         []*SslCert `protobuf:"bytes,1,rep,name=certs,proto3" json:"certs,omitempty"`
	ActiveVersion string     `protobuf:"bytes,2,opt,name=active_version,json=activeVersion,proto3" json:"active_version,omitempty"`
	// This is always `sql#instancesListServerCas`.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *InstancesListServerCasResponse) Reset() {
	*x = InstancesListServerCasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesListServerCasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesListServerCasResponse) ProtoMessage() {}

func (x *InstancesListServerCasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesListServerCasResponse.ProtoReflect.Descriptor instead.
func (*InstancesListServerCasResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{41}
}

func (x *InstancesListServerCasResponse) GetCerts() []*SslCert {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *InstancesListServerCasResponse) GetActiveVersion() string {
	if x != nil {
		return x.ActiveVersion
	}
	return ""
}

func (x *InstancesListServerCasResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Database instance restore backup request.
type InstancesRestoreBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters required to perform the restore backup operation.
	RestoreBackupContext *RestoreBackupContext `protobuf:"bytes,1,opt,name=restore_backup_context,json=restoreBackupContext,proto3" json:"restore_backup_context,omitempty"`
}

func (x *InstancesRestoreBackupRequest) Reset() {
	*x = InstancesRestoreBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesRestoreBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesRestoreBackupRequest) ProtoMessage() {}

func (x *InstancesRestoreBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesRestoreBackupRequest.ProtoReflect.Descriptor instead.
func (*InstancesRestoreBackupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{42}
}

func (x *InstancesRestoreBackupRequest) GetRestoreBackupContext() *RestoreBackupContext {
	if x != nil {
		return x.RestoreBackupContext
	}
	return nil
}

// Rotate server CA request.
type InstancesRotateServerCaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the rotate server CA operation.
	RotateServerCaContext *RotateServerCaContext `protobuf:"bytes,1,opt,name=rotate_server_ca_context,json=rotateServerCaContext,proto3" json:"rotate_server_ca_context,omitempty"`
}

func (x *InstancesRotateServerCaRequest) Reset() {
	*x = InstancesRotateServerCaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesRotateServerCaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesRotateServerCaRequest) ProtoMessage() {}

func (x *InstancesRotateServerCaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesRotateServerCaRequest.ProtoReflect.Descriptor instead.
func (*InstancesRotateServerCaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{43}
}

func (x *InstancesRotateServerCaRequest) GetRotateServerCaContext() *RotateServerCaContext {
	if x != nil {
		return x.RotateServerCaContext
	}
	return nil
}

// Instance truncate log request.
type InstancesTruncateLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains details about the truncate log operation.
	TruncateLogContext *TruncateLogContext `protobuf:"bytes,1,opt,name=truncate_log_context,json=truncateLogContext,proto3" json:"truncate_log_context,omitempty"`
}

func (x *InstancesTruncateLogRequest) Reset() {
	*x = InstancesTruncateLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesTruncateLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesTruncateLogRequest) ProtoMessage() {}

func (x *InstancesTruncateLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesTruncateLogRequest.ProtoReflect.Descriptor instead.
func (*InstancesTruncateLogRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{44}
}

func (x *InstancesTruncateLogRequest) GetTruncateLogContext() *TruncateLogContext {
	if x != nil {
		return x.TruncateLogContext
	}
	return nil
}

// Instance verify external sync settings response.
type SqlInstancesVerifyExternalSyncSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#migrationSettingErrorList`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// List of migration violations.
	Errors []*SqlExternalSyncSettingError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// List of migration warnings.
	Warnings []*SqlExternalSyncSettingError `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) Reset() {
	*x = SqlInstancesVerifyExternalSyncSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesVerifyExternalSyncSettingsResponse) ProtoMessage() {}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesVerifyExternalSyncSettingsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{45}
}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) GetErrors() []*SqlExternalSyncSettingError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SqlInstancesVerifyExternalSyncSettingsResponse) GetWarnings() []*SqlExternalSyncSettingError {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Instance get disk shrink config response.
type SqlInstancesGetDiskShrinkConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#getDiskShrinkConfig`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The minimum size to which a disk can be shrunk in GigaBytes.
	MinimalTargetSizeGb int64 `protobuf:"varint,2,opt,name=minimal_target_size_gb,json=minimalTargetSizeGb,proto3" json:"minimal_target_size_gb,omitempty"`
	// Additional message to customers.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SqlInstancesGetDiskShrinkConfigResponse) Reset() {
	*x = SqlInstancesGetDiskShrinkConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetDiskShrinkConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetDiskShrinkConfigResponse) ProtoMessage() {}

func (x *SqlInstancesGetDiskShrinkConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetDiskShrinkConfigResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetDiskShrinkConfigResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{46}
}

func (x *SqlInstancesGetDiskShrinkConfigResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SqlInstancesGetDiskShrinkConfigResponse) GetMinimalTargetSizeGb() int64 {
	if x != nil {
		return x.MinimalTargetSizeGb
	}
	return 0
}

func (x *SqlInstancesGetDiskShrinkConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Instance get latest recovery time request.
type SqlInstancesGetLatestRecoveryTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) Reset() {
	*x = SqlInstancesGetLatestRecoveryTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetLatestRecoveryTimeRequest) ProtoMessage() {}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetLatestRecoveryTimeRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetLatestRecoveryTimeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{47}
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance get latest recovery time response.
type SqlInstancesGetLatestRecoveryTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#getLatestRecoveryTime`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Timestamp, identifies the latest recovery time of the source instance.
	LatestRecoveryTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=latest_recovery_time,json=latestRecoveryTime,proto3" json:"latest_recovery_time,omitempty"`
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) Reset() {
	*x = SqlInstancesGetLatestRecoveryTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetLatestRecoveryTimeResponse) ProtoMessage() {}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetLatestRecoveryTimeResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetLatestRecoveryTimeResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{48}
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) GetLatestRecoveryTime() *timestamp.Timestamp {
	if x != nil {
		return x.LatestRecoveryTime
	}
	return nil
}

// Database instance clone context.
type CloneContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#cloneContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Reserved for future use.
	PitrTimestampMs int64 `protobuf:"varint,2,opt,name=pitr_timestamp_ms,json=pitrTimestampMs,proto3" json:"pitr_timestamp_ms,omitempty"`
	// Name of the Cloud SQL instance to be created as a clone.
	DestinationInstanceName string `protobuf:"bytes,3,opt,name=destination_instance_name,json=destinationInstanceName,proto3" json:"destination_instance_name,omitempty"`
	// Binary log coordinates, if specified, identify the position up to which the
	// source instance is cloned. If not specified, the source instance is
	// cloned up to the most recent binary log coordinates.
	BinLogCoordinates *BinLogCoordinates `protobuf:"bytes,4,opt,name=bin_log_coordinates,json=binLogCoordinates,proto3" json:"bin_log_coordinates,omitempty"`
	// Timestamp, if specified, identifies the time to which the source instance
	// is cloned.
	PointInTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=point_in_time,json=pointInTime,proto3" json:"point_in_time,omitempty"`
	// The name of the allocated ip range for the private ip Cloud SQL instance.
	// For example: "google-managed-services-default". If set, the cloned instance
	// ip will be created in the allocated range. The range name must comply with
	// [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name
	// must be 1-63 characters long and match the regular expression
	// [a-z]([-a-z0-9]*[a-z0-9])?.
	// Reserved for future use.
	AllocatedIpRange string `protobuf:"bytes,6,opt,name=allocated_ip_range,json=allocatedIpRange,proto3" json:"allocated_ip_range,omitempty"`
	// (SQL Server only) Clone only the specified databases from the source
	// instance. Clone all databases if empty.
	DatabaseNames []string `protobuf:"bytes,9,rep,name=database_names,json=databaseNames,proto3" json:"database_names,omitempty"`
	// Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance
	// in the specified zone. If no zone is specified, clone to the same zone as
	// the source instance.
	PreferredZone *string `protobuf:"bytes,10,opt,name=preferred_zone,json=preferredZone,proto3,oneof" json:"preferred_zone,omitempty"`
}

func (x *CloneContext) Reset() {
	*x = CloneContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneContext) ProtoMessage() {}

func (x *CloneContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneContext.ProtoReflect.Descriptor instead.
func (*CloneContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{49}
}

func (x *CloneContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CloneContext) GetPitrTimestampMs() int64 {
	if x != nil {
		return x.PitrTimestampMs
	}
	return 0
}

func (x *CloneContext) GetDestinationInstanceName() string {
	if x != nil {
		return x.DestinationInstanceName
	}
	return ""
}

func (x *CloneContext) GetBinLogCoordinates() *BinLogCoordinates {
	if x != nil {
		return x.BinLogCoordinates
	}
	return nil
}

func (x *CloneContext) GetPointInTime() *timestamp.Timestamp {
	if x != nil {
		return x.PointInTime
	}
	return nil
}

func (x *CloneContext) GetAllocatedIpRange() string {
	if x != nil {
		return x.AllocatedIpRange
	}
	return ""
}

func (x *CloneContext) GetDatabaseNames() []string {
	if x != nil {
		return x.DatabaseNames
	}
	return nil
}

func (x *CloneContext) GetPreferredZone() string {
	if x != nil && x.PreferredZone != nil {
		return *x.PreferredZone
	}
	return ""
}

// Binary log coordinates.
type BinLogCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the binary log file for a Cloud SQL instance.
	BinLogFileName string `protobuf:"bytes,1,opt,name=bin_log_file_name,json=binLogFileName,proto3" json:"bin_log_file_name,omitempty"`
	// Position (offset) within the binary log file.
	BinLogPosition int64 `protobuf:"varint,2,opt,name=bin_log_position,json=binLogPosition,proto3" json:"bin_log_position,omitempty"`
	// This is always `sql#binLogCoordinates`.
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *BinLogCoordinates) Reset() {
	*x = BinLogCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinLogCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinLogCoordinates) ProtoMessage() {}

func (x *BinLogCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinLogCoordinates.ProtoReflect.Descriptor instead.
func (*BinLogCoordinates) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{50}
}

func (x *BinLogCoordinates) GetBinLogFileName() string {
	if x != nil {
		return x.BinLogFileName
	}
	return ""
}

func (x *BinLogCoordinates) GetBinLogPosition() int64 {
	if x != nil {
		return x.BinLogPosition
	}
	return 0
}

func (x *BinLogCoordinates) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// A Cloud SQL instance resource.
type DatabaseInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#instance`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The current serving state of the Cloud SQL instance.
	State DatabaseInstance_SqlInstanceState `protobuf:"varint,2,opt,name=state,proto3,enum=mockgcp.cloud.sql.v1.DatabaseInstance_SqlInstanceState" json:"state,omitempty"`
	// The database engine type and version. The `databaseVersion` field cannot
	// be changed after instance creation.
	DatabaseVersion SqlDatabaseVersion `protobuf:"varint,3,opt,name=database_version,json=databaseVersion,proto3,enum=mockgcp.cloud.sql.v1.SqlDatabaseVersion" json:"database_version,omitempty"`
	// The user settings.
	Settings *Settings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// This field is deprecated and will be removed from a future version of the
	// API. Use the `settings.settingsVersion` field instead.
	Etag string `protobuf:"bytes,5,opt,name=etag,proto3" json:"etag,omitempty"`
	// The name and status of the failover replica.
	FailoverReplica *DatabaseInstance_SqlFailoverReplica `protobuf:"bytes,6,opt,name=failover_replica,json=failoverReplica,proto3" json:"failover_replica,omitempty"`
	// The name of the instance which will act as primary in the replication
	// setup.
	MasterInstanceName string `protobuf:"bytes,7,opt,name=master_instance_name,json=masterInstanceName,proto3" json:"master_instance_name,omitempty"`
	// The replicas of the instance.
	ReplicaNames []string `protobuf:"bytes,8,rep,name=replica_names,json=replicaNames,proto3" json:"replica_names,omitempty"`
	// The maximum disk size of the instance in bytes.
	//
	// Deprecated: Do not use.
	MaxDiskSize *wrappers.Int64Value `protobuf:"bytes,9,opt,name=max_disk_size,json=maxDiskSize,proto3" json:"max_disk_size,omitempty"`
	// The current disk usage of the instance in bytes. This property has been
	// deprecated. Use the
	// "cloudsql.googleapis.com/database/disk/bytes_used" metric in Cloud
	// Monitoring API instead. Please see [this
	// announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ)
	// for details.
	//
	// Deprecated: Do not use.
	CurrentDiskSize *wrappers.Int64Value `protobuf:"bytes,10,opt,name=current_disk_size,json=currentDiskSize,proto3" json:"current_disk_size,omitempty"`
	// The assigned IP addresses for the instance.
	IpAddresses []*IpMapping `protobuf:"bytes,11,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// SSL configuration.
	ServerCaCert *SslCert `protobuf:"bytes,12,opt,name=server_ca_cert,json=serverCaCert,proto3" json:"server_ca_cert,omitempty"`
	// The instance type.
	InstanceType SqlInstanceType `protobuf:"varint,13,opt,name=instance_type,json=instanceType,proto3,enum=mockgcp.cloud.sql.v1.SqlInstanceType" json:"instance_type,omitempty"`
	// The project ID of the project containing the Cloud SQL instance. The Google
	// apps domain is prefixed if applicable.
	Project string `protobuf:"bytes,14,opt,name=project,proto3" json:"project,omitempty"`
	// The IPv6 address assigned to the instance.
	// (Deprecated) This property was applicable only
	// to First Generation instances.
	//
	// Deprecated: Do not use.
	Ipv6Address string `protobuf:"bytes,15,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	// The service account email address assigned to the instance.\This
	// property is read-only.
	ServiceAccountEmailAddress string `protobuf:"bytes,16,opt,name=service_account_email_address,json=serviceAccountEmailAddress,proto3" json:"service_account_email_address,omitempty"`
	// Configuration specific to on-premises instances.
	OnPremisesConfiguration *OnPremisesConfiguration `protobuf:"bytes,17,opt,name=on_premises_configuration,json=onPremisesConfiguration,proto3" json:"on_premises_configuration,omitempty"`
	// Configuration specific to failover replicas and read replicas.
	ReplicaConfiguration *ReplicaConfiguration `protobuf:"bytes,18,opt,name=replica_configuration,json=replicaConfiguration,proto3" json:"replica_configuration,omitempty"`
	// The backend type.
	// `SECOND_GEN`: Cloud SQL database instance.
	// `EXTERNAL`: A database server that is not managed by Google.
	//
	// This property is read-only; use the `tier` property in the `settings`
	// object to determine the database type.
	BackendType SqlBackendType `protobuf:"varint,19,opt,name=backend_type,json=backendType,proto3,enum=mockgcp.cloud.sql.v1.SqlBackendType" json:"backend_type,omitempty"`
	// The URI of this resource.
	SelfLink string `protobuf:"bytes,20,opt,name=self_link,json=selfLink,proto3" json:"self_link,omitempty"`
	// If the instance state is SUSPENDED, the reason for the suspension.
	SuspensionReason []SqlSuspensionReason `protobuf:"varint,21,rep,packed,name=suspension_reason,json=suspensionReason,proto3,enum=mockgcp.cloud.sql.v1.SqlSuspensionReason" json:"suspension_reason,omitempty"`
	// Connection name of the Cloud SQL instance used in connection strings.
	ConnectionName string `protobuf:"bytes,22,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
	// Name of the Cloud SQL instance. This does not include the project ID.
	Name string `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`
	// The geographical region of the Cloud SQL instance.
	//
	// It can be one of the
	// [regions](https://cloud.google.com/sql/docs/mysql/locations#location-r)
	// where Cloud SQL operates:
	//
	// For example,  `asia-east1`, `europe-west1`, and  `us-central1`.
	// The default value is `us-central1`.
	Region string `protobuf:"bytes,24,opt,name=region,proto3" json:"region,omitempty"`
	// The Compute Engine zone that the instance is currently serving from. This
	// value could be different from the zone that was specified when the instance
	// was created if the instance has failed over to its secondary zone. WARNING:
	// Changing this might restart the instance.
	GceZone string `protobuf:"bytes,25,opt,name=gce_zone,json=gceZone,proto3" json:"gce_zone,omitempty"`
	// The Compute Engine zone that the failover instance is currently serving
	// from for a regional instance. This value could be different
	// from the zone that was specified when the instance
	// was created if the instance has failed over to its secondary/failover zone.
	SecondaryGceZone string `protobuf:"bytes,34,opt,name=secondary_gce_zone,json=secondaryGceZone,proto3" json:"secondary_gce_zone,omitempty"`
	// Disk encryption configuration specific to an instance.
	DiskEncryptionConfiguration *DiskEncryptionConfiguration `protobuf:"bytes,26,opt,name=disk_encryption_configuration,json=diskEncryptionConfiguration,proto3" json:"disk_encryption_configuration,omitempty"`
	// Disk encryption status specific to an instance.
	DiskEncryptionStatus *DiskEncryptionStatus `protobuf:"bytes,27,opt,name=disk_encryption_status,json=diskEncryptionStatus,proto3" json:"disk_encryption_status,omitempty"`
	// Initial root password. Use only on creation. You must set root passwords
	// before you can connect to PostgreSQL instances.
	RootPassword string `protobuf:"bytes,29,opt,name=root_password,json=rootPassword,proto3" json:"root_password,omitempty"`
	// The start time of any upcoming scheduled maintenance for this instance.
	ScheduledMaintenance *DatabaseInstance_SqlScheduledMaintenance `protobuf:"bytes,30,opt,name=scheduled_maintenance,json=scheduledMaintenance,proto3" json:"scheduled_maintenance,omitempty"`
	// The status indicating if instance satisfiesPzs.
	// Reserved for future use.
	SatisfiesPzs *wrappers.BoolValue `protobuf:"bytes,35,opt,name=satisfies_pzs,json=satisfiesPzs,proto3" json:"satisfies_pzs,omitempty"`
	// Output only. Stores the current database version running on the instance
	// including minor version such as `MYSQL_8_0_18`.
	DatabaseInstalledVersion string `protobuf:"bytes,40,opt,name=database_installed_version,json=databaseInstalledVersion,proto3" json:"database_installed_version,omitempty"`
	// This field represents the report generated by the proactive database
	// wellness job for OutOfDisk issues.
	// *  Writers:
	//   - the proactive database wellness job for OOD.
	//
	// *  Readers:
	//   - the proactive database wellness job
	OutOfDiskReport *DatabaseInstance_SqlOutOfDiskReport `protobuf:"bytes,38,opt,name=out_of_disk_report,json=outOfDiskReport,proto3,oneof" json:"out_of_disk_report,omitempty"`
	// Output only. The time when the instance was created in
	// [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example
	// `2012-11-15T16:19:00.094Z`.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,39,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. List all maintenance versions applicable on the instance
	AvailableMaintenanceVersions []string `protobuf:"bytes,41,rep,name=available_maintenance_versions,json=availableMaintenanceVersions,proto3" json:"available_maintenance_versions,omitempty"`
	// The current software version on the instance.
	MaintenanceVersion     string                                   `protobuf:"bytes,42,opt,name=maintenance_version,json=maintenanceVersion,proto3" json:"maintenance_version,omitempty"`
	SqlNetworkArchitecture *DatabaseInstance_SqlNetworkArchitecture `protobuf:"varint,47,opt,name=sql_network_architecture,json=sqlNetworkArchitecture,proto3,enum=mockgcp.cloud.sql.v1.DatabaseInstance_SqlNetworkArchitecture,oneof" json:"sql_network_architecture,omitempty"`
	// Output only. The link to service attachment of PSC instance.
	PscServiceAttachmentLink *string `protobuf:"bytes,48,opt,name=psc_service_attachment_link,json=pscServiceAttachmentLink,proto3,oneof" json:"psc_service_attachment_link,omitempty"`
	// Output only. The dns name of the instance.
	DnsName *string `protobuf:"bytes,49,opt,name=dns_name,json=dnsName,proto3,oneof" json:"dns_name,omitempty"`
	// Output only. DEPRECATED: please use write_endpoint instead.
	//
	// Deprecated: Do not use.
	PrimaryDnsName *string `protobuf:"bytes,51,opt,name=primary_dns_name,json=primaryDnsName,proto3,oneof" json:"primary_dns_name,omitempty"`
	// Output only. The dns name of the primary instance in a replication group.
	WriteEndpoint *string `protobuf:"bytes,52,opt,name=write_endpoint,json=writeEndpoint,proto3,oneof" json:"write_endpoint,omitempty"`
}

func (x *DatabaseInstance) Reset() {
	*x = DatabaseInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInstance) ProtoMessage() {}

func (x *DatabaseInstance) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInstance.ProtoReflect.Descriptor instead.
func (*DatabaseInstance) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51}
}

func (x *DatabaseInstance) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DatabaseInstance) GetState() DatabaseInstance_SqlInstanceState {
	if x != nil {
		return x.State
	}
	return DatabaseInstance_SQL_INSTANCE_STATE_UNSPECIFIED
}

func (x *DatabaseInstance) GetDatabaseVersion() SqlDatabaseVersion {
	if x != nil {
		return x.DatabaseVersion
	}
	return SqlDatabaseVersion_SQL_DATABASE_VERSION_UNSPECIFIED
}

func (x *DatabaseInstance) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *DatabaseInstance) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *DatabaseInstance) GetFailoverReplica() *DatabaseInstance_SqlFailoverReplica {
	if x != nil {
		return x.FailoverReplica
	}
	return nil
}

func (x *DatabaseInstance) GetMasterInstanceName() string {
	if x != nil {
		return x.MasterInstanceName
	}
	return ""
}

func (x *DatabaseInstance) GetReplicaNames() []string {
	if x != nil {
		return x.ReplicaNames
	}
	return nil
}

// Deprecated: Do not use.
func (x *DatabaseInstance) GetMaxDiskSize() *wrappers.Int64Value {
	if x != nil {
		return x.MaxDiskSize
	}
	return nil
}

// Deprecated: Do not use.
func (x *DatabaseInstance) GetCurrentDiskSize() *wrappers.Int64Value {
	if x != nil {
		return x.CurrentDiskSize
	}
	return nil
}

func (x *DatabaseInstance) GetIpAddresses() []*IpMapping {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *DatabaseInstance) GetServerCaCert() *SslCert {
	if x != nil {
		return x.ServerCaCert
	}
	return nil
}

func (x *DatabaseInstance) GetInstanceType() SqlInstanceType {
	if x != nil {
		return x.InstanceType
	}
	return SqlInstanceType_SQL_INSTANCE_TYPE_UNSPECIFIED
}

func (x *DatabaseInstance) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Deprecated: Do not use.
func (x *DatabaseInstance) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *DatabaseInstance) GetServiceAccountEmailAddress() string {
	if x != nil {
		return x.ServiceAccountEmailAddress
	}
	return ""
}

func (x *DatabaseInstance) GetOnPremisesConfiguration() *OnPremisesConfiguration {
	if x != nil {
		return x.OnPremisesConfiguration
	}
	return nil
}

func (x *DatabaseInstance) GetReplicaConfiguration() *ReplicaConfiguration {
	if x != nil {
		return x.ReplicaConfiguration
	}
	return nil
}

func (x *DatabaseInstance) GetBackendType() SqlBackendType {
	if x != nil {
		return x.BackendType
	}
	return SqlBackendType_SQL_BACKEND_TYPE_UNSPECIFIED
}

func (x *DatabaseInstance) GetSelfLink() string {
	if x != nil {
		return x.SelfLink
	}
	return ""
}

func (x *DatabaseInstance) GetSuspensionReason() []SqlSuspensionReason {
	if x != nil {
		return x.SuspensionReason
	}
	return nil
}

func (x *DatabaseInstance) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *DatabaseInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseInstance) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DatabaseInstance) GetGceZone() string {
	if x != nil {
		return x.GceZone
	}
	return ""
}

func (x *DatabaseInstance) GetSecondaryGceZone() string {
	if x != nil {
		return x.SecondaryGceZone
	}
	return ""
}

func (x *DatabaseInstance) GetDiskEncryptionConfiguration() *DiskEncryptionConfiguration {
	if x != nil {
		return x.DiskEncryptionConfiguration
	}
	return nil
}

func (x *DatabaseInstance) GetDiskEncryptionStatus() *DiskEncryptionStatus {
	if x != nil {
		return x.DiskEncryptionStatus
	}
	return nil
}

func (x *DatabaseInstance) GetRootPassword() string {
	if x != nil {
		return x.RootPassword
	}
	return ""
}

func (x *DatabaseInstance) GetScheduledMaintenance() *DatabaseInstance_SqlScheduledMaintenance {
	if x != nil {
		return x.ScheduledMaintenance
	}
	return nil
}

func (x *DatabaseInstance) GetSatisfiesPzs() *wrappers.BoolValue {
	if x != nil {
		return x.SatisfiesPzs
	}
	return nil
}

func (x *DatabaseInstance) GetDatabaseInstalledVersion() string {
	if x != nil {
		return x.DatabaseInstalledVersion
	}
	return ""
}

func (x *DatabaseInstance) GetOutOfDiskReport() *DatabaseInstance_SqlOutOfDiskReport {
	if x != nil {
		return x.OutOfDiskReport
	}
	return nil
}

func (x *DatabaseInstance) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DatabaseInstance) GetAvailableMaintenanceVersions() []string {
	if x != nil {
		return x.AvailableMaintenanceVersions
	}
	return nil
}

func (x *DatabaseInstance) GetMaintenanceVersion() string {
	if x != nil {
		return x.MaintenanceVersion
	}
	return ""
}

func (x *DatabaseInstance) GetSqlNetworkArchitecture() DatabaseInstance_SqlNetworkArchitecture {
	if x != nil && x.SqlNetworkArchitecture != nil {
		return *x.SqlNetworkArchitecture
	}
	return DatabaseInstance_SQL_NETWORK_ARCHITECTURE_UNSPECIFIED
}

func (x *DatabaseInstance) GetPscServiceAttachmentLink() string {
	if x != nil && x.PscServiceAttachmentLink != nil {
		return *x.PscServiceAttachmentLink
	}
	return ""
}

func (x *DatabaseInstance) GetDnsName() string {
	if x != nil && x.DnsName != nil {
		return *x.DnsName
	}
	return ""
}

// Deprecated: Do not use.
func (x *DatabaseInstance) GetPrimaryDnsName() string {
	if x != nil && x.PrimaryDnsName != nil {
		return *x.PrimaryDnsName
	}
	return ""
}

func (x *DatabaseInstance) GetWriteEndpoint() string {
	if x != nil && x.WriteEndpoint != nil {
		return *x.WriteEndpoint
	}
	return ""
}

// Reschedule options for maintenance windows.
type SqlInstancesRescheduleMaintenanceRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of the reschedule the user wants.
	Reschedule *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule `protobuf:"bytes,3,opt,name=reschedule,proto3" json:"reschedule,omitempty"`
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody) Reset() {
	*x = SqlInstancesRescheduleMaintenanceRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRescheduleMaintenanceRequestBody) ProtoMessage() {}

func (x *SqlInstancesRescheduleMaintenanceRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRescheduleMaintenanceRequestBody.ProtoReflect.Descriptor instead.
func (*SqlInstancesRescheduleMaintenanceRequestBody) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{52}
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody) GetReschedule() *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule {
	if x != nil {
		return x.Reschedule
	}
	return nil
}

// Database instance demote primary instance context.
type DemoteMasterContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#demoteMasterContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Verify the GTID consistency for demote operation. Default value:
	// `True`. Setting this flag to `false` enables you to bypass the GTID
	// consistency check between on-premises primary instance and Cloud SQL
	// instance during the demotion operation but also exposes you to the risk of
	// future replication failures. Change the value only if you know the reason
	// for the GTID divergence and are confident that doing so will not cause any
	// replication issues.
	VerifyGtidConsistency *wrappers.BoolValue `protobuf:"bytes,2,opt,name=verify_gtid_consistency,json=verifyGtidConsistency,proto3" json:"verify_gtid_consistency,omitempty"`
	// The name of the instance which will act as on-premises primary instance
	// in the replication setup.
	MasterInstanceName string `protobuf:"bytes,3,opt,name=master_instance_name,json=masterInstanceName,proto3" json:"master_instance_name,omitempty"`
	// Configuration specific to read-replicas replicating from the on-premises
	// primary instance.
	ReplicaConfiguration *DemoteMasterConfiguration `protobuf:"bytes,4,opt,name=replica_configuration,json=replicaConfiguration,proto3" json:"replica_configuration,omitempty"`
	// Flag to skip replication setup on the instance.
	SkipReplicationSetup bool `protobuf:"varint,5,opt,name=skip_replication_setup,json=skipReplicationSetup,proto3" json:"skip_replication_setup,omitempty"`
}

func (x *DemoteMasterContext) Reset() {
	*x = DemoteMasterContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoteMasterContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteMasterContext) ProtoMessage() {}

func (x *DemoteMasterContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteMasterContext.ProtoReflect.Descriptor instead.
func (*DemoteMasterContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{53}
}

func (x *DemoteMasterContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DemoteMasterContext) GetVerifyGtidConsistency() *wrappers.BoolValue {
	if x != nil {
		return x.VerifyGtidConsistency
	}
	return nil
}

func (x *DemoteMasterContext) GetMasterInstanceName() string {
	if x != nil {
		return x.MasterInstanceName
	}
	return ""
}

func (x *DemoteMasterContext) GetReplicaConfiguration() *DemoteMasterConfiguration {
	if x != nil {
		return x.ReplicaConfiguration
	}
	return nil
}

func (x *DemoteMasterContext) GetSkipReplicationSetup() bool {
	if x != nil {
		return x.SkipReplicationSetup
	}
	return false
}

// This context is used to demote an existing standalone instance to be
// a Cloud SQL read replica for an external database server.
type DemoteContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#demoteContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Required. The name of the instance which acts as the on-premises primary
	// instance in the replication setup.
	SourceRepresentativeInstanceName string `protobuf:"bytes,2,opt,name=source_representative_instance_name,json=sourceRepresentativeInstanceName,proto3" json:"source_representative_instance_name,omitempty"`
}

func (x *DemoteContext) Reset() {
	*x = DemoteContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoteContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoteContext) ProtoMessage() {}

func (x *DemoteContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoteContext.ProtoReflect.Descriptor instead.
func (*DemoteContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{54}
}

func (x *DemoteContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DemoteContext) GetSourceRepresentativeInstanceName() string {
	if x != nil {
		return x.SourceRepresentativeInstanceName
	}
	return ""
}

// Database instance failover context.
type FailoverContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current settings version of this instance. Request will be rejected if
	// this version doesn't match the current settings version.
	SettingsVersion int64 `protobuf:"varint,1,opt,name=settings_version,json=settingsVersion,proto3" json:"settings_version,omitempty"`
	// This is always `sql#failoverContext`.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *FailoverContext) Reset() {
	*x = FailoverContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailoverContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailoverContext) ProtoMessage() {}

func (x *FailoverContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailoverContext.ProtoReflect.Descriptor instead.
func (*FailoverContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{55}
}

func (x *FailoverContext) GetSettingsVersion() int64 {
	if x != nil {
		return x.SettingsVersion
	}
	return 0
}

func (x *FailoverContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Database instance restore from backup context.
// Backup context contains source instance id and project id.
type RestoreBackupContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#restoreBackupContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The ID of the backup run to restore from.
	BackupRunId int64 `protobuf:"varint,2,opt,name=backup_run_id,json=backupRunId,proto3" json:"backup_run_id,omitempty"`
	// The ID of the instance that the backup was taken from.
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The full project ID of the source instance.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *RestoreBackupContext) Reset() {
	*x = RestoreBackupContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreBackupContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreBackupContext) ProtoMessage() {}

func (x *RestoreBackupContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreBackupContext.ProtoReflect.Descriptor instead.
func (*RestoreBackupContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{56}
}

func (x *RestoreBackupContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RestoreBackupContext) GetBackupRunId() int64 {
	if x != nil {
		return x.BackupRunId
	}
	return 0
}

func (x *RestoreBackupContext) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *RestoreBackupContext) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance rotate server CA context.
type RotateServerCaContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#rotateServerCaContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The fingerprint of the next version to be rotated to. If left unspecified,
	// will be rotated to the most recently added server CA version.
	NextVersion string `protobuf:"bytes,2,opt,name=next_version,json=nextVersion,proto3" json:"next_version,omitempty"`
}

func (x *RotateServerCaContext) Reset() {
	*x = RotateServerCaContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotateServerCaContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateServerCaContext) ProtoMessage() {}

func (x *RotateServerCaContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateServerCaContext.ProtoReflect.Descriptor instead.
func (*RotateServerCaContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{57}
}

func (x *RotateServerCaContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RotateServerCaContext) GetNextVersion() string {
	if x != nil {
		return x.NextVersion
	}
	return ""
}

// Database Instance truncate log context.
type TruncateLogContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#truncateLogContext`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The type of log to truncate. Valid values are `MYSQL_GENERAL_TABLE` and
	// `MYSQL_SLOW_TABLE`.
	LogType string `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
}

func (x *TruncateLogContext) Reset() {
	*x = TruncateLogContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateLogContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateLogContext) ProtoMessage() {}

func (x *TruncateLogContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateLogContext.ProtoReflect.Descriptor instead.
func (*TruncateLogContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{58}
}

func (x *TruncateLogContext) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TruncateLogContext) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

// External primary instance migration setting error/warning.
type SqlExternalSyncSettingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be `sql#externalSyncSettingError` or
	// `sql#externalSyncSettingWarning`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Identifies the specific error that occurred.
	Type SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType `protobuf:"varint,2,opt,name=type,proto3,enum=mockgcp.cloud.sql.v1.SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType" json:"type,omitempty"`
	// Additional information about the error encountered.
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *SqlExternalSyncSettingError) Reset() {
	*x = SqlExternalSyncSettingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlExternalSyncSettingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlExternalSyncSettingError) ProtoMessage() {}

func (x *SqlExternalSyncSettingError) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlExternalSyncSettingError.ProtoReflect.Descriptor instead.
func (*SqlExternalSyncSettingError) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{59}
}

func (x *SqlExternalSyncSettingError) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SqlExternalSyncSettingError) GetType() SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType {
	if x != nil {
		return x.Type
	}
	return SqlExternalSyncSettingError_SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED
}

func (x *SqlExternalSyncSettingError) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

// On-premises instance configuration.
type OnPremisesConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host and port of the on-premises instance in host:port format
	HostPort string `protobuf:"bytes,1,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	// This is always `sql#onPremisesConfiguration`.
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// The username for connecting to on-premises instance.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// The password for connecting to on-premises instance.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate string `protobuf:"bytes,5,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate string `protobuf:"bytes,6,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// PEM representation of the replica's private key. The corresponsing public
	// key is encoded in the client's certificate.
	ClientKey string `protobuf:"bytes,7,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath string `protobuf:"bytes,8,opt,name=dump_file_path,json=dumpFilePath,proto3" json:"dump_file_path,omitempty"`
	// The reference to Cloud SQL instance if the source is Cloud SQL.
	SourceInstance *InstanceReference `protobuf:"bytes,15,opt,name=source_instance,json=sourceInstance,proto3" json:"source_instance,omitempty"`
}

func (x *OnPremisesConfiguration) Reset() {
	*x = OnPremisesConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnPremisesConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPremisesConfiguration) ProtoMessage() {}

func (x *OnPremisesConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPremisesConfiguration.ProtoReflect.Descriptor instead.
func (*OnPremisesConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{60}
}

func (x *OnPremisesConfiguration) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

func (x *OnPremisesConfiguration) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *OnPremisesConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OnPremisesConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OnPremisesConfiguration) GetCaCertificate() string {
	if x != nil {
		return x.CaCertificate
	}
	return ""
}

func (x *OnPremisesConfiguration) GetClientCertificate() string {
	if x != nil {
		return x.ClientCertificate
	}
	return ""
}

func (x *OnPremisesConfiguration) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *OnPremisesConfiguration) GetDumpFilePath() string {
	if x != nil {
		return x.DumpFilePath
	}
	return ""
}

func (x *OnPremisesConfiguration) GetSourceInstance() *InstanceReference {
	if x != nil {
		return x.SourceInstance
	}
	return nil
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#replicaConfiguration`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// MySQL specific configuration when replicating from a MySQL on-premises
	// primary instance. Replication configuration information such as the
	// username, password, certificates, and keys are not stored in the instance
	// metadata. The configuration information is used only to set up the
	// replication connection and is stored by MySQL in a file named
	// `master.info` in the data directory.
	MysqlReplicaConfiguration *MySqlReplicaConfiguration `protobuf:"bytes,2,opt,name=mysql_replica_configuration,json=mysqlReplicaConfiguration,proto3" json:"mysql_replica_configuration,omitempty"`
	// Specifies if the replica is the failover target. If the field is set to
	// `true`, the replica will be designated as a failover replica. In case the
	// primary instance fails, the replica instance will be promoted as the new
	// primary instance. Only one replica can be specified as failover target, and
	// the replica has to be in different zone with the primary instance.
	FailoverTarget *wrappers.BoolValue `protobuf:"bytes,3,opt,name=failover_target,json=failoverTarget,proto3" json:"failover_target,omitempty"`
	// Optional. Specifies if a SQL Server replica is a cascadable replica. A
	// cascadable replica is a SQL Server cross region replica that supports
	// replica(s) under it.
	CascadableReplica *wrappers.BoolValue `protobuf:"bytes,5,opt,name=cascadable_replica,json=cascadableReplica,proto3" json:"cascadable_replica,omitempty"`
}

func (x *ReplicaConfiguration) Reset() {
	*x = ReplicaConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaConfiguration) ProtoMessage() {}

func (x *ReplicaConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaConfiguration.ProtoReflect.Descriptor instead.
func (*ReplicaConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{61}
}

func (x *ReplicaConfiguration) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ReplicaConfiguration) GetMysqlReplicaConfiguration() *MySqlReplicaConfiguration {
	if x != nil {
		return x.MysqlReplicaConfiguration
	}
	return nil
}

func (x *ReplicaConfiguration) GetFailoverTarget() *wrappers.BoolValue {
	if x != nil {
		return x.FailoverTarget
	}
	return nil
}

func (x *ReplicaConfiguration) GetCascadableReplica() *wrappers.BoolValue {
	if x != nil {
		return x.CascadableReplica
	}
	return nil
}

type DatabaseInstance_SqlFailoverReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the failover replica. If specified at instance creation, a
	// failover replica is created for the instance. The name
	// doesn't include the project ID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The availability status of the failover replica. A false status indicates
	// that the failover replica is out of sync. The primary instance can only
	// failover to the failover replica when the status is true.
	Available *wrappers.BoolValue `protobuf:"bytes,2,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *DatabaseInstance_SqlFailoverReplica) Reset() {
	*x = DatabaseInstance_SqlFailoverReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInstance_SqlFailoverReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInstance_SqlFailoverReplica) ProtoMessage() {}

func (x *DatabaseInstance_SqlFailoverReplica) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInstance_SqlFailoverReplica.ProtoReflect.Descriptor instead.
func (*DatabaseInstance_SqlFailoverReplica) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 0}
}

func (x *DatabaseInstance_SqlFailoverReplica) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseInstance_SqlFailoverReplica) GetAvailable() *wrappers.BoolValue {
	if x != nil {
		return x.Available
	}
	return nil
}

// Any scheduled maintenance for this instance.
type DatabaseInstance_SqlScheduledMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Deprecated: Do not use.
	CanDefer bool `protobuf:"varint,2,opt,name=can_defer,json=canDefer,proto3" json:"can_defer,omitempty"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule bool `protobuf:"varint,3,opt,name=can_reschedule,json=canReschedule,proto3" json:"can_reschedule,omitempty"`
	// Maintenance cannot be rescheduled to start beyond this deadline.
	ScheduleDeadlineTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=schedule_deadline_time,json=scheduleDeadlineTime,proto3,oneof" json:"schedule_deadline_time,omitempty"`
}

func (x *DatabaseInstance_SqlScheduledMaintenance) Reset() {
	*x = DatabaseInstance_SqlScheduledMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInstance_SqlScheduledMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInstance_SqlScheduledMaintenance) ProtoMessage() {}

func (x *DatabaseInstance_SqlScheduledMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInstance_SqlScheduledMaintenance.ProtoReflect.Descriptor instead.
func (*DatabaseInstance_SqlScheduledMaintenance) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 1}
}

func (x *DatabaseInstance_SqlScheduledMaintenance) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *DatabaseInstance_SqlScheduledMaintenance) GetCanDefer() bool {
	if x != nil {
		return x.CanDefer
	}
	return false
}

func (x *DatabaseInstance_SqlScheduledMaintenance) GetCanReschedule() bool {
	if x != nil {
		return x.CanReschedule
	}
	return false
}

func (x *DatabaseInstance_SqlScheduledMaintenance) GetScheduleDeadlineTime() *timestamp.Timestamp {
	if x != nil {
		return x.ScheduleDeadlineTime
	}
	return nil
}

// This message wraps up the information written by out-of-disk detection job.
type DatabaseInstance_SqlOutOfDiskReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field represents the state generated by the proactive database
	// wellness job for OutOfDisk issues.
	// *  Writers:
	//   - the proactive database wellness job for OOD.
	//
	// *  Readers:
	//   - the proactive database wellness job
	SqlOutOfDiskState *DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState `protobuf:"varint,1,opt,name=sql_out_of_disk_state,json=sqlOutOfDiskState,proto3,enum=mockgcp.cloud.sql.v1.DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState,oneof" json:"sql_out_of_disk_state,omitempty"`
	// The minimum recommended increase size in GigaBytes
	// This field is consumed by the frontend
	// *  Writers:
	//   - the proactive database wellness job for OOD.
	//
	// *  Readers:
	SqlMinRecommendedIncreaseSizeGb *int32 `protobuf:"varint,2,opt,name=sql_min_recommended_increase_size_gb,json=sqlMinRecommendedIncreaseSizeGb,proto3,oneof" json:"sql_min_recommended_increase_size_gb,omitempty"`
}

func (x *DatabaseInstance_SqlOutOfDiskReport) Reset() {
	*x = DatabaseInstance_SqlOutOfDiskReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInstance_SqlOutOfDiskReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInstance_SqlOutOfDiskReport) ProtoMessage() {}

func (x *DatabaseInstance_SqlOutOfDiskReport) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInstance_SqlOutOfDiskReport.ProtoReflect.Descriptor instead.
func (*DatabaseInstance_SqlOutOfDiskReport) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{51, 2}
}

func (x *DatabaseInstance_SqlOutOfDiskReport) GetSqlOutOfDiskState() DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState {
	if x != nil && x.SqlOutOfDiskState != nil {
		return *x.SqlOutOfDiskState
	}
	return DatabaseInstance_SqlOutOfDiskReport_SQL_OUT_OF_DISK_STATE_UNSPECIFIED
}

func (x *DatabaseInstance_SqlOutOfDiskReport) GetSqlMinRecommendedIncreaseSizeGb() int32 {
	if x != nil && x.SqlMinRecommendedIncreaseSizeGb != nil {
		return *x.SqlMinRecommendedIncreaseSizeGb
	}
	return 0
}

type SqlInstancesRescheduleMaintenanceRequestBody_Reschedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The type of the reschedule.
	RescheduleType SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType `protobuf:"varint,1,opt,name=reschedule_type,json=rescheduleType,proto3,enum=mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType" json:"reschedule_type,omitempty"`
	// Optional. Timestamp when the maintenance shall be rescheduled to if
	// reschedule_type=SPECIFIC_TIME, in
	// [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example
	// `2012-11-15T16:19:00.094Z`.
	ScheduleTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) Reset() {
	*x = SqlInstancesRescheduleMaintenanceRequestBody_Reschedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) ProtoMessage() {}

func (x *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRescheduleMaintenanceRequestBody_Reschedule.ProtoReflect.Descriptor instead.
func (*SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP(), []int{52, 0}
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) GetRescheduleType() SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return SqlInstancesRescheduleMaintenanceRequestBody_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *SqlInstancesRescheduleMaintenanceRequestBody_Reschedule) GetScheduleTime() *timestamp.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

var File_mockgcp_cloud_sql_v1_cloud_sql_instances_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x71, 0x6c,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x56, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x51, 0x0a, 0x19, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x9f,
	0x01, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xa2, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x97, 0x01, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x71, 0x0a, 0x19, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8b,
	0x01, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x58, 0x0a, 0x20,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x75, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a,
	0x1d, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x64, 0x62, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52,
	0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x57, 0x0a, 0x1f,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x56, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x9d, 0x01,
	0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa0, 0x01,
	0x0a, 0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x8d, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xb8, 0x01, 0x0a, 0x28, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x1c,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x72, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x47, 0x0a,
	0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x26, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x2d, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x4f, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02,
	0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xc6, 0x03, 0x0a, 0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x71,
	0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5b, 0x0a, 0x23, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x26, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x60, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x7d, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x13, 0x64, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x69, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x64,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x64,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x16,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x6c, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x62, 0x0a, 0x1e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x64, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x05, 0x63,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x18, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x15, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x79, 0x0a, 0x1b,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x12, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x49,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x27, 0x53, 0x71, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x28, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x29, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x0c, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x69, 0x74, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x69, 0x74, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x11, 0x62, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x7c, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x62, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x62, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xa2, 0x1e, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x64, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x69, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x56, 0x0a,
	0x11, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x63,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x63,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x67, 0x63, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x47, 0x63, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x75, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x64,
	0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x64, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x73, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x73, 0x5f, 0x70, 0x7a, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x73, 0x50, 0x7a, 0x73, 0x12, 0x41, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x1e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x01, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1b, 0x70, 0x73, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52,
	0x18, 0x70, 0x73, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x08,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x03, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0x18, 0x01, 0xe0,
	0x41, 0x03, 0x48, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x6e, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x62, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x8e, 0x02, 0x0a,
	0x17, 0x53, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x8b, 0x03,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x71, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4d, 0x69,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x88, 0x01, 0x01, 0x22, 0x59, 0x0a,
	0x11, 0x53, 0x71, 0x6c, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x51, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x53, 0x48,
	0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x71, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x73, 0x71, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x22, 0xb4, 0x01, 0x0a, 0x10,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x51, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x55, 0x4e, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x12, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x1a, 0x02,
	0x08, 0x01, 0x22, 0x7e, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x51, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x57, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x71,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x73, 0x63, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xde, 0x03, 0x0a, 0x2c,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x6d, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0xce, 0x01, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x22, 0xcb, 0x02, 0x0a,
	0x13, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x67, 0x74, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x47, 0x74, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x22, 0x77, 0x0a, 0x0d, 0x44, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x52, 0x0a, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x4e, 0x0a, 0x15, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x43, 0x0a, 0x12, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xef, 0x0b, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x71, 0x6c, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xbc, 0x0a, 0x0a, 0x1f, 0x53, 0x71,
	0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x30, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x4f, 0x5f, 0x50, 0x47, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x47, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x0b, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x10,
	0x0c, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x44, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x55, 0x50, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x44, 0x42, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x47, 0x54, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x10,
	0x15, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x17, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42,
	0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x18, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x49, 0x4e, 0x4c, 0x4f, 0x47, 0x5f, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49,
	0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x49, 0x53, 0x4b, 0x59,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x53,
	0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x43, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x10, 0x21, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x23, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x54, 0x52, 0x5f, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x24, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x26, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52,
	0x53, 0x10, 0x27, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x28, 0x22, 0xef, 0x02, 0x0a, 0x17, 0x4f, 0x6e, 0x50,
	0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x75, 0x6d, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6f, 0x0a, 0x1b, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x79, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6d,
	0x79, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4e, 0x0a,
	0x12, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x63, 0x61, 0x73, 0x63,
	0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x2a, 0x68, 0x0a,
	0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x2a, 0x81, 0x01, 0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x51, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45,
	0x4d, 0x49, 0x53, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x13,
	0x53, 0x71, 0x6c, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x4d, 0x53, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x05, 0x32, 0xf3, 0x2c, 0x0a, 0x13, 0x53, 0x71, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61,
	0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x12, 0x99, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x31, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x3a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x32, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xa2, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x34,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x66, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x52,
	0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x32, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x8c, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0xc0, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x32, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xae, 0x01, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x37, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x3a,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0xae, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3c, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x99, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xb1, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x36,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22,
	0x39, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0xb4, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x12, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x1a, 0x2b, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0xb9, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xc9, 0x01, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x22,
	0x41, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xfa, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x46, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xba, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x22, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x3a,
	0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x3d, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0xdb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12,
	0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0xb7, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xe3, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71, 0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x5d,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x14, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x73, 0x71, 0x6c, 0x70, 0x62, 0x3b, 0x73, 0x71, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescData = file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDesc
)

func file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescData)
	})
	return file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDescData
}

var file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_goTypes = []interface{}{
	(ExternalSyncParallelLevel)(0),                                      // 0: mockgcp.cloud.sql.v1.ExternalSyncParallelLevel
	(SqlInstanceType)(0),                                                // 1: mockgcp.cloud.sql.v1.SqlInstanceType
	(SqlSuspensionReason)(0),                                            // 2: mockgcp.cloud.sql.v1.SqlSuspensionReason
	(BackupReencryptionConfig_BackupType)(0),                            // 3: mockgcp.cloud.sql.v1.BackupReencryptionConfig.BackupType
	(SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode)(0), // 4: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	(DatabaseInstance_SqlInstanceState)(0),                              // 5: mockgcp.cloud.sql.v1.DatabaseInstance.SqlInstanceState
	(DatabaseInstance_SqlNetworkArchitecture)(0),                        // 6: mockgcp.cloud.sql.v1.DatabaseInstance.SqlNetworkArchitecture
	(DatabaseInstance_SqlOutOfDiskReport_SqlOutOfDiskState)(0),          // 7: mockgcp.cloud.sql.v1.DatabaseInstance.SqlOutOfDiskReport.SqlOutOfDiskState
	(SqlInstancesRescheduleMaintenanceRequestBody_RescheduleType)(0),    // 8: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.RescheduleType
	(SqlExternalSyncSettingError_SqlExternalSyncSettingErrorType)(0),    // 9: mockgcp.cloud.sql.v1.SqlExternalSyncSettingError.SqlExternalSyncSettingErrorType
	(*SqlInstancesAddServerCaRequest)(nil),                              // 10: mockgcp.cloud.sql.v1.SqlInstancesAddServerCaRequest
	(*SqlInstancesCloneRequest)(nil),                                    // 11: mockgcp.cloud.sql.v1.SqlInstancesCloneRequest
	(*SqlInstancesDeleteRequest)(nil),                                   // 12: mockgcp.cloud.sql.v1.SqlInstancesDeleteRequest
	(*SqlInstancesDemoteMasterRequest)(nil),                             // 13: mockgcp.cloud.sql.v1.SqlInstancesDemoteMasterRequest
	(*SqlInstancesDemoteRequest)(nil),                                   // 14: mockgcp.cloud.sql.v1.SqlInstancesDemoteRequest
	(*SqlInstancesExportRequest)(nil),                                   // 15: mockgcp.cloud.sql.v1.SqlInstancesExportRequest
	(*SqlInstancesFailoverRequest)(nil),                                 // 16: mockgcp.cloud.sql.v1.SqlInstancesFailoverRequest
	(*SqlInstancesGetRequest)(nil),                                      // 17: mockgcp.cloud.sql.v1.SqlInstancesGetRequest
	(*SqlInstancesImportRequest)(nil),                                   // 18: mockgcp.cloud.sql.v1.SqlInstancesImportRequest
	(*SqlInstancesInsertRequest)(nil),                                   // 19: mockgcp.cloud.sql.v1.SqlInstancesInsertRequest
	(*SqlInstancesListRequest)(nil),                                     // 20: mockgcp.cloud.sql.v1.SqlInstancesListRequest
	(*SqlInstancesListServerCasRequest)(nil),                            // 21: mockgcp.cloud.sql.v1.SqlInstancesListServerCasRequest
	(*SqlInstancesPatchRequest)(nil),                                    // 22: mockgcp.cloud.sql.v1.SqlInstancesPatchRequest
	(*SqlInstancesPromoteReplicaRequest)(nil),                           // 23: mockgcp.cloud.sql.v1.SqlInstancesPromoteReplicaRequest
	(*SqlInstancesSwitchoverRequest)(nil),                               // 24: mockgcp.cloud.sql.v1.SqlInstancesSwitchoverRequest
	(*SqlInstancesResetSslConfigRequest)(nil),                           // 25: mockgcp.cloud.sql.v1.SqlInstancesResetSslConfigRequest
	(*SqlInstancesRestartRequest)(nil),                                  // 26: mockgcp.cloud.sql.v1.SqlInstancesRestartRequest
	(*SqlInstancesRestoreBackupRequest)(nil),                            // 27: mockgcp.cloud.sql.v1.SqlInstancesRestoreBackupRequest
	(*SqlInstancesRotateServerCaRequest)(nil),                           // 28: mockgcp.cloud.sql.v1.SqlInstancesRotateServerCaRequest
	(*SqlInstancesStartReplicaRequest)(nil),                             // 29: mockgcp.cloud.sql.v1.SqlInstancesStartReplicaRequest
	(*SqlInstancesStopReplicaRequest)(nil),                              // 30: mockgcp.cloud.sql.v1.SqlInstancesStopReplicaRequest
	(*SqlInstancesTruncateLogRequest)(nil),                              // 31: mockgcp.cloud.sql.v1.SqlInstancesTruncateLogRequest
	(*SqlInstancesPerformDiskShrinkRequest)(nil),                        // 32: mockgcp.cloud.sql.v1.SqlInstancesPerformDiskShrinkRequest
	(*SqlInstancesUpdateRequest)(nil),                                   // 33: mockgcp.cloud.sql.v1.SqlInstancesUpdateRequest
	(*SqlInstancesRescheduleMaintenanceRequest)(nil),                    // 34: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequest
	(*SqlInstancesReencryptRequest)(nil),                                // 35: mockgcp.cloud.sql.v1.SqlInstancesReencryptRequest
	(*InstancesReencryptRequest)(nil),                                   // 36: mockgcp.cloud.sql.v1.InstancesReencryptRequest
	(*BackupReencryptionConfig)(nil),                                    // 37: mockgcp.cloud.sql.v1.BackupReencryptionConfig
	(*SqlInstancesGetDiskShrinkConfigRequest)(nil),                      // 38: mockgcp.cloud.sql.v1.SqlInstancesGetDiskShrinkConfigRequest
	(*SqlInstancesVerifyExternalSyncSettingsRequest)(nil),               // 39: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest
	(*SqlInstancesStartExternalSyncRequest)(nil),                        // 40: mockgcp.cloud.sql.v1.SqlInstancesStartExternalSyncRequest
	(*SqlInstancesResetReplicaSizeRequest)(nil),                         // 41: mockgcp.cloud.sql.v1.SqlInstancesResetReplicaSizeRequest
	(*SqlInstancesCreateEphemeralCertRequest)(nil),                      // 42: mockgcp.cloud.sql.v1.SqlInstancesCreateEphemeralCertRequest
	(*InstancesCloneRequest)(nil),                                       // 43: mockgcp.cloud.sql.v1.InstancesCloneRequest
	(*InstancesDemoteMasterRequest)(nil),                                // 44: mockgcp.cloud.sql.v1.InstancesDemoteMasterRequest
	(*InstancesDemoteRequest)(nil),                                      // 45: mockgcp.cloud.sql.v1.InstancesDemoteRequest
	(*InstancesExportRequest)(nil),                                      // 46: mockgcp.cloud.sql.v1.InstancesExportRequest
	(*InstancesFailoverRequest)(nil),                                    // 47: mockgcp.cloud.sql.v1.InstancesFailoverRequest
	(*SslCertsCreateEphemeralRequest)(nil),                              // 48: mockgcp.cloud.sql.v1.SslCertsCreateEphemeralRequest
	(*InstancesImportRequest)(nil),                                      // 49: mockgcp.cloud.sql.v1.InstancesImportRequest
	(*InstancesListResponse)(nil),                                       // 50: mockgcp.cloud.sql.v1.InstancesListResponse
	(*InstancesListServerCasResponse)(nil),                              // 51: mockgcp.cloud.sql.v1.InstancesListServerCasResponse
	(*InstancesRestoreBackupRequest)(nil),                               // 52: mockgcp.cloud.sql.v1.InstancesRestoreBackupRequest
	(*InstancesRotateServerCaRequest)(nil),                              // 53: mockgcp.cloud.sql.v1.InstancesRotateServerCaRequest
	(*InstancesTruncateLogRequest)(nil),                                 // 54: mockgcp.cloud.sql.v1.InstancesTruncateLogRequest
	(*SqlInstancesVerifyExternalSyncSettingsResponse)(nil),              // 55: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsResponse
	(*SqlInstancesGetDiskShrinkConfigResponse)(nil),                     // 56: mockgcp.cloud.sql.v1.SqlInstancesGetDiskShrinkConfigResponse
	(*SqlInstancesGetLatestRecoveryTimeRequest)(nil),                    // 57: mockgcp.cloud.sql.v1.SqlInstancesGetLatestRecoveryTimeRequest
	(*SqlInstancesGetLatestRecoveryTimeResponse)(nil),                   // 58: mockgcp.cloud.sql.v1.SqlInstancesGetLatestRecoveryTimeResponse
	(*CloneContext)(nil),                                                // 59: mockgcp.cloud.sql.v1.CloneContext
	(*BinLogCoordinates)(nil),                                           // 60: mockgcp.cloud.sql.v1.BinLogCoordinates
	(*DatabaseInstance)(nil),                                            // 61: mockgcp.cloud.sql.v1.DatabaseInstance
	(*SqlInstancesRescheduleMaintenanceRequestBody)(nil),                // 62: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody
	(*DemoteMasterContext)(nil),                                         // 63: mockgcp.cloud.sql.v1.DemoteMasterContext
	(*DemoteContext)(nil),                                               // 64: mockgcp.cloud.sql.v1.DemoteContext
	(*FailoverContext)(nil),                                             // 65: mockgcp.cloud.sql.v1.FailoverContext
	(*RestoreBackupContext)(nil),                                        // 66: mockgcp.cloud.sql.v1.RestoreBackupContext
	(*RotateServerCaContext)(nil),                                       // 67: mockgcp.cloud.sql.v1.RotateServerCaContext
	(*TruncateLogContext)(nil),                                          // 68: mockgcp.cloud.sql.v1.TruncateLogContext
	(*SqlExternalSyncSettingError)(nil),                                 // 69: mockgcp.cloud.sql.v1.SqlExternalSyncSettingError
	(*OnPremisesConfiguration)(nil),                                     // 70: mockgcp.cloud.sql.v1.OnPremisesConfiguration
	(*ReplicaConfiguration)(nil),                                        // 71: mockgcp.cloud.sql.v1.ReplicaConfiguration
	(*DatabaseInstance_SqlFailoverReplica)(nil),                         // 72: mockgcp.cloud.sql.v1.DatabaseInstance.SqlFailoverReplica
	(*DatabaseInstance_SqlScheduledMaintenance)(nil),                    // 73: mockgcp.cloud.sql.v1.DatabaseInstance.SqlScheduledMaintenance
	(*DatabaseInstance_SqlOutOfDiskReport)(nil),                         // 74: mockgcp.cloud.sql.v1.DatabaseInstance.SqlOutOfDiskReport
	(*SqlInstancesRescheduleMaintenanceRequestBody_Reschedule)(nil),     // 75: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.Reschedule
	(*duration.Duration)(nil),                                           // 76: google.protobuf.Duration
	(*PerformDiskShrinkContext)(nil),                                    // 77: mockgcp.cloud.sql.v1.PerformDiskShrinkContext
	(*MySqlSyncConfig)(nil),                                             // 78: mockgcp.cloud.sql.v1.MySqlSyncConfig
	(*ExportContext)(nil),                                               // 79: mockgcp.cloud.sql.v1.ExportContext
	(*ImportContext)(nil),                                               // 80: mockgcp.cloud.sql.v1.ImportContext
	(*ApiWarning)(nil),                                                  // 81: mockgcp.cloud.sql.v1.ApiWarning
	(*SslCert)(nil),                                                     // 82: mockgcp.cloud.sql.v1.SslCert
	(*timestamp.Timestamp)(nil),                                         // 83: google.protobuf.Timestamp
	(SqlDatabaseVersion)(0),                                             // 84: mockgcp.cloud.sql.v1.SqlDatabaseVersion
	(*Settings)(nil),                                                    // 85: mockgcp.cloud.sql.v1.Settings
	(*wrappers.Int64Value)(nil),                                         // 86: google.protobuf.Int64Value
	(*IpMapping)(nil),                                                   // 87: mockgcp.cloud.sql.v1.IpMapping
	(SqlBackendType)(0),                                                 // 88: mockgcp.cloud.sql.v1.SqlBackendType
	(*DiskEncryptionConfiguration)(nil),                                 // 89: mockgcp.cloud.sql.v1.DiskEncryptionConfiguration
	(*DiskEncryptionStatus)(nil),                                        // 90: mockgcp.cloud.sql.v1.DiskEncryptionStatus
	(*wrappers.BoolValue)(nil),                                          // 91: google.protobuf.BoolValue
	(*DemoteMasterConfiguration)(nil),                                   // 92: mockgcp.cloud.sql.v1.DemoteMasterConfiguration
	(*InstanceReference)(nil),                                           // 93: mockgcp.cloud.sql.v1.InstanceReference
	(*MySqlReplicaConfiguration)(nil),                                   // 94: mockgcp.cloud.sql.v1.MySqlReplicaConfiguration
	(*Operation)(nil),                                                   // 95: mockgcp.cloud.sql.v1.Operation
}
var file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_depIdxs = []int32{
	43,  // 0: mockgcp.cloud.sql.v1.SqlInstancesCloneRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesCloneRequest
	44,  // 1: mockgcp.cloud.sql.v1.SqlInstancesDemoteMasterRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesDemoteMasterRequest
	45,  // 2: mockgcp.cloud.sql.v1.SqlInstancesDemoteRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesDemoteRequest
	46,  // 3: mockgcp.cloud.sql.v1.SqlInstancesExportRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesExportRequest
	47,  // 4: mockgcp.cloud.sql.v1.SqlInstancesFailoverRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesFailoverRequest
	49,  // 5: mockgcp.cloud.sql.v1.SqlInstancesImportRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesImportRequest
	61,  // 6: mockgcp.cloud.sql.v1.SqlInstancesInsertRequest.body:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance
	61,  // 7: mockgcp.cloud.sql.v1.SqlInstancesPatchRequest.body:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance
	76,  // 8: mockgcp.cloud.sql.v1.SqlInstancesSwitchoverRequest.db_timeout:type_name -> google.protobuf.Duration
	52,  // 9: mockgcp.cloud.sql.v1.SqlInstancesRestoreBackupRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesRestoreBackupRequest
	53,  // 10: mockgcp.cloud.sql.v1.SqlInstancesRotateServerCaRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesRotateServerCaRequest
	54,  // 11: mockgcp.cloud.sql.v1.SqlInstancesTruncateLogRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesTruncateLogRequest
	77,  // 12: mockgcp.cloud.sql.v1.SqlInstancesPerformDiskShrinkRequest.body:type_name -> mockgcp.cloud.sql.v1.PerformDiskShrinkContext
	61,  // 13: mockgcp.cloud.sql.v1.SqlInstancesUpdateRequest.body:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance
	62,  // 14: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequest.body:type_name -> mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody
	36,  // 15: mockgcp.cloud.sql.v1.SqlInstancesReencryptRequest.body:type_name -> mockgcp.cloud.sql.v1.InstancesReencryptRequest
	37,  // 16: mockgcp.cloud.sql.v1.InstancesReencryptRequest.backup_reencryption_config:type_name -> mockgcp.cloud.sql.v1.BackupReencryptionConfig
	3,   // 17: mockgcp.cloud.sql.v1.BackupReencryptionConfig.backup_type:type_name -> mockgcp.cloud.sql.v1.BackupReencryptionConfig.BackupType
	4,   // 18: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest.sync_mode:type_name -> mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	78,  // 19: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest.mysql_sync_config:type_name -> mockgcp.cloud.sql.v1.MySqlSyncConfig
	4,   // 20: mockgcp.cloud.sql.v1.SqlInstancesStartExternalSyncRequest.sync_mode:type_name -> mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	78,  // 21: mockgcp.cloud.sql.v1.SqlInstancesStartExternalSyncRequest.mysql_sync_config:type_name -> mockgcp.cloud.sql.v1.MySqlSyncConfig
	0,   // 22: mockgcp.cloud.sql.v1.SqlInstancesStartExternalSyncRequest.sync_parallel_level:type_name -> mockgcp.cloud.sql.v1.ExternalSyncParallelLevel
	48,  // 23: mockgcp.cloud.sql.v1.SqlInstancesCreateEphemeralCertRequest.body:type_name -> mockgcp.cloud.sql.v1.SslCertsCreateEphemeralRequest
	59,  // 24: mockgcp.cloud.sql.v1.InstancesCloneRequest.clone_context:type_name -> mockgcp.cloud.sql.v1.CloneContext
	63,  // 25: mockgcp.cloud.sql.v1.InstancesDemoteMasterRequest.demote_master_context:type_name -> mockgcp.cloud.sql.v1.DemoteMasterContext
	64,  // 26: mockgcp.cloud.sql.v1.InstancesDemoteRequest.demote_context:type_name -> mockgcp.cloud.sql.v1.DemoteContext
	79,  // 27: mockgcp.cloud.sql.v1.InstancesExportRequest.export_context:type_name -> mockgcp.cloud.sql.v1.ExportContext
	65,  // 28: mockgcp.cloud.sql.v1.InstancesFailoverRequest.failover_context:type_name -> mockgcp.cloud.sql.v1.FailoverContext
	80,  // 29: mockgcp.cloud.sql.v1.InstancesImportRequest.import_context:type_name -> mockgcp.cloud.sql.v1.ImportContext
	81,  // 30: mockgcp.cloud.sql.v1.InstancesListResponse.warnings:type_name -> mockgcp.cloud.sql.v1.ApiWarning
	61,  // 31: mockgcp.cloud.sql.v1.InstancesListResponse.items:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance
	82,  // 32: mockgcp.cloud.sql.v1.InstancesListServerCasResponse.certs:type_name -> mockgcp.cloud.sql.v1.SslCert
	66,  // 33: mockgcp.cloud.sql.v1.InstancesRestoreBackupRequest.restore_backup_context:type_name -> mockgcp.cloud.sql.v1.RestoreBackupContext
	67,  // 34: mockgcp.cloud.sql.v1.InstancesRotateServerCaRequest.rotate_server_ca_context:type_name -> mockgcp.cloud.sql.v1.RotateServerCaContext
	68,  // 35: mockgcp.cloud.sql.v1.InstancesTruncateLogRequest.truncate_log_context:type_name -> mockgcp.cloud.sql.v1.TruncateLogContext
	69,  // 36: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsResponse.errors:type_name -> mockgcp.cloud.sql.v1.SqlExternalSyncSettingError
	69,  // 37: mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsResponse.warnings:type_name -> mockgcp.cloud.sql.v1.SqlExternalSyncSettingError
	83,  // 38: mockgcp.cloud.sql.v1.SqlInstancesGetLatestRecoveryTimeResponse.latest_recovery_time:type_name -> google.protobuf.Timestamp
	60,  // 39: mockgcp.cloud.sql.v1.CloneContext.bin_log_coordinates:type_name -> mockgcp.cloud.sql.v1.BinLogCoordinates
	83,  // 40: mockgcp.cloud.sql.v1.CloneContext.point_in_time:type_name -> google.protobuf.Timestamp
	5,   // 41: mockgcp.cloud.sql.v1.DatabaseInstance.state:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlInstanceState
	84,  // 42: mockgcp.cloud.sql.v1.DatabaseInstance.database_version:type_name -> mockgcp.cloud.sql.v1.SqlDatabaseVersion
	85,  // 43: mockgcp.cloud.sql.v1.DatabaseInstance.settings:type_name -> mockgcp.cloud.sql.v1.Settings
	72,  // 44: mockgcp.cloud.sql.v1.DatabaseInstance.failover_replica:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlFailoverReplica
	86,  // 45: mockgcp.cloud.sql.v1.DatabaseInstance.max_disk_size:type_name -> google.protobuf.Int64Value
	86,  // 46: mockgcp.cloud.sql.v1.DatabaseInstance.current_disk_size:type_name -> google.protobuf.Int64Value
	87,  // 47: mockgcp.cloud.sql.v1.DatabaseInstance.ip_addresses:type_name -> mockgcp.cloud.sql.v1.IpMapping
	82,  // 48: mockgcp.cloud.sql.v1.DatabaseInstance.server_ca_cert:type_name -> mockgcp.cloud.sql.v1.SslCert
	1,   // 49: mockgcp.cloud.sql.v1.DatabaseInstance.instance_type:type_name -> mockgcp.cloud.sql.v1.SqlInstanceType
	70,  // 50: mockgcp.cloud.sql.v1.DatabaseInstance.on_premises_configuration:type_name -> mockgcp.cloud.sql.v1.OnPremisesConfiguration
	71,  // 51: mockgcp.cloud.sql.v1.DatabaseInstance.replica_configuration:type_name -> mockgcp.cloud.sql.v1.ReplicaConfiguration
	88,  // 52: mockgcp.cloud.sql.v1.DatabaseInstance.backend_type:type_name -> mockgcp.cloud.sql.v1.SqlBackendType
	2,   // 53: mockgcp.cloud.sql.v1.DatabaseInstance.suspension_reason:type_name -> mockgcp.cloud.sql.v1.SqlSuspensionReason
	89,  // 54: mockgcp.cloud.sql.v1.DatabaseInstance.disk_encryption_configuration:type_name -> mockgcp.cloud.sql.v1.DiskEncryptionConfiguration
	90,  // 55: mockgcp.cloud.sql.v1.DatabaseInstance.disk_encryption_status:type_name -> mockgcp.cloud.sql.v1.DiskEncryptionStatus
	73,  // 56: mockgcp.cloud.sql.v1.DatabaseInstance.scheduled_maintenance:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlScheduledMaintenance
	91,  // 57: mockgcp.cloud.sql.v1.DatabaseInstance.satisfies_pzs:type_name -> google.protobuf.BoolValue
	74,  // 58: mockgcp.cloud.sql.v1.DatabaseInstance.out_of_disk_report:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlOutOfDiskReport
	83,  // 59: mockgcp.cloud.sql.v1.DatabaseInstance.create_time:type_name -> google.protobuf.Timestamp
	6,   // 60: mockgcp.cloud.sql.v1.DatabaseInstance.sql_network_architecture:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlNetworkArchitecture
	75,  // 61: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.reschedule:type_name -> mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.Reschedule
	91,  // 62: mockgcp.cloud.sql.v1.DemoteMasterContext.verify_gtid_consistency:type_name -> google.protobuf.BoolValue
	92,  // 63: mockgcp.cloud.sql.v1.DemoteMasterContext.replica_configuration:type_name -> mockgcp.cloud.sql.v1.DemoteMasterConfiguration
	9,   // 64: mockgcp.cloud.sql.v1.SqlExternalSyncSettingError.type:type_name -> mockgcp.cloud.sql.v1.SqlExternalSyncSettingError.SqlExternalSyncSettingErrorType
	93,  // 65: mockgcp.cloud.sql.v1.OnPremisesConfiguration.source_instance:type_name -> mockgcp.cloud.sql.v1.InstanceReference
	94,  // 66: mockgcp.cloud.sql.v1.ReplicaConfiguration.mysql_replica_configuration:type_name -> mockgcp.cloud.sql.v1.MySqlReplicaConfiguration
	91,  // 67: mockgcp.cloud.sql.v1.ReplicaConfiguration.failover_target:type_name -> google.protobuf.BoolValue
	91,  // 68: mockgcp.cloud.sql.v1.ReplicaConfiguration.cascadable_replica:type_name -> google.protobuf.BoolValue
	91,  // 69: mockgcp.cloud.sql.v1.DatabaseInstance.SqlFailoverReplica.available:type_name -> google.protobuf.BoolValue
	83,  // 70: mockgcp.cloud.sql.v1.DatabaseInstance.SqlScheduledMaintenance.start_time:type_name -> google.protobuf.Timestamp
	83,  // 71: mockgcp.cloud.sql.v1.DatabaseInstance.SqlScheduledMaintenance.schedule_deadline_time:type_name -> google.protobuf.Timestamp
	7,   // 72: mockgcp.cloud.sql.v1.DatabaseInstance.SqlOutOfDiskReport.sql_out_of_disk_state:type_name -> mockgcp.cloud.sql.v1.DatabaseInstance.SqlOutOfDiskReport.SqlOutOfDiskState
	8,   // 73: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.Reschedule.reschedule_type:type_name -> mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.RescheduleType
	83,  // 74: mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequestBody.Reschedule.schedule_time:type_name -> google.protobuf.Timestamp
	10,  // 75: mockgcp.cloud.sql.v1.SqlInstancesService.AddServerCa:input_type -> mockgcp.cloud.sql.v1.SqlInstancesAddServerCaRequest
	11,  // 76: mockgcp.cloud.sql.v1.SqlInstancesService.Clone:input_type -> mockgcp.cloud.sql.v1.SqlInstancesCloneRequest
	12,  // 77: mockgcp.cloud.sql.v1.SqlInstancesService.Delete:input_type -> mockgcp.cloud.sql.v1.SqlInstancesDeleteRequest
	13,  // 78: mockgcp.cloud.sql.v1.SqlInstancesService.DemoteMaster:input_type -> mockgcp.cloud.sql.v1.SqlInstancesDemoteMasterRequest
	14,  // 79: mockgcp.cloud.sql.v1.SqlInstancesService.Demote:input_type -> mockgcp.cloud.sql.v1.SqlInstancesDemoteRequest
	15,  // 80: mockgcp.cloud.sql.v1.SqlInstancesService.Export:input_type -> mockgcp.cloud.sql.v1.SqlInstancesExportRequest
	16,  // 81: mockgcp.cloud.sql.v1.SqlInstancesService.Failover:input_type -> mockgcp.cloud.sql.v1.SqlInstancesFailoverRequest
	35,  // 82: mockgcp.cloud.sql.v1.SqlInstancesService.Reencrypt:input_type -> mockgcp.cloud.sql.v1.SqlInstancesReencryptRequest
	17,  // 83: mockgcp.cloud.sql.v1.SqlInstancesService.Get:input_type -> mockgcp.cloud.sql.v1.SqlInstancesGetRequest
	18,  // 84: mockgcp.cloud.sql.v1.SqlInstancesService.Import:input_type -> mockgcp.cloud.sql.v1.SqlInstancesImportRequest
	19,  // 85: mockgcp.cloud.sql.v1.SqlInstancesService.Insert:input_type -> mockgcp.cloud.sql.v1.SqlInstancesInsertRequest
	20,  // 86: mockgcp.cloud.sql.v1.SqlInstancesService.List:input_type -> mockgcp.cloud.sql.v1.SqlInstancesListRequest
	21,  // 87: mockgcp.cloud.sql.v1.SqlInstancesService.ListServerCas:input_type -> mockgcp.cloud.sql.v1.SqlInstancesListServerCasRequest
	22,  // 88: mockgcp.cloud.sql.v1.SqlInstancesService.Patch:input_type -> mockgcp.cloud.sql.v1.SqlInstancesPatchRequest
	23,  // 89: mockgcp.cloud.sql.v1.SqlInstancesService.PromoteReplica:input_type -> mockgcp.cloud.sql.v1.SqlInstancesPromoteReplicaRequest
	24,  // 90: mockgcp.cloud.sql.v1.SqlInstancesService.Switchover:input_type -> mockgcp.cloud.sql.v1.SqlInstancesSwitchoverRequest
	25,  // 91: mockgcp.cloud.sql.v1.SqlInstancesService.ResetSslConfig:input_type -> mockgcp.cloud.sql.v1.SqlInstancesResetSslConfigRequest
	26,  // 92: mockgcp.cloud.sql.v1.SqlInstancesService.Restart:input_type -> mockgcp.cloud.sql.v1.SqlInstancesRestartRequest
	27,  // 93: mockgcp.cloud.sql.v1.SqlInstancesService.RestoreBackup:input_type -> mockgcp.cloud.sql.v1.SqlInstancesRestoreBackupRequest
	28,  // 94: mockgcp.cloud.sql.v1.SqlInstancesService.RotateServerCa:input_type -> mockgcp.cloud.sql.v1.SqlInstancesRotateServerCaRequest
	29,  // 95: mockgcp.cloud.sql.v1.SqlInstancesService.StartReplica:input_type -> mockgcp.cloud.sql.v1.SqlInstancesStartReplicaRequest
	30,  // 96: mockgcp.cloud.sql.v1.SqlInstancesService.StopReplica:input_type -> mockgcp.cloud.sql.v1.SqlInstancesStopReplicaRequest
	31,  // 97: mockgcp.cloud.sql.v1.SqlInstancesService.TruncateLog:input_type -> mockgcp.cloud.sql.v1.SqlInstancesTruncateLogRequest
	33,  // 98: mockgcp.cloud.sql.v1.SqlInstancesService.Update:input_type -> mockgcp.cloud.sql.v1.SqlInstancesUpdateRequest
	42,  // 99: mockgcp.cloud.sql.v1.SqlInstancesService.CreateEphemeral:input_type -> mockgcp.cloud.sql.v1.SqlInstancesCreateEphemeralCertRequest
	34,  // 100: mockgcp.cloud.sql.v1.SqlInstancesService.RescheduleMaintenance:input_type -> mockgcp.cloud.sql.v1.SqlInstancesRescheduleMaintenanceRequest
	39,  // 101: mockgcp.cloud.sql.v1.SqlInstancesService.VerifyExternalSyncSettings:input_type -> mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsRequest
	40,  // 102: mockgcp.cloud.sql.v1.SqlInstancesService.StartExternalSync:input_type -> mockgcp.cloud.sql.v1.SqlInstancesStartExternalSyncRequest
	32,  // 103: mockgcp.cloud.sql.v1.SqlInstancesService.PerformDiskShrink:input_type -> mockgcp.cloud.sql.v1.SqlInstancesPerformDiskShrinkRequest
	38,  // 104: mockgcp.cloud.sql.v1.SqlInstancesService.GetDiskShrinkConfig:input_type -> mockgcp.cloud.sql.v1.SqlInstancesGetDiskShrinkConfigRequest
	41,  // 105: mockgcp.cloud.sql.v1.SqlInstancesService.ResetReplicaSize:input_type -> mockgcp.cloud.sql.v1.SqlInstancesResetReplicaSizeRequest
	57,  // 106: mockgcp.cloud.sql.v1.SqlInstancesService.GetLatestRecoveryTime:input_type -> mockgcp.cloud.sql.v1.SqlInstancesGetLatestRecoveryTimeRequest
	95,  // 107: mockgcp.cloud.sql.v1.SqlInstancesService.AddServerCa:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 108: mockgcp.cloud.sql.v1.SqlInstancesService.Clone:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 109: mockgcp.cloud.sql.v1.SqlInstancesService.Delete:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 110: mockgcp.cloud.sql.v1.SqlInstancesService.DemoteMaster:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 111: mockgcp.cloud.sql.v1.SqlInstancesService.Demote:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 112: mockgcp.cloud.sql.v1.SqlInstancesService.Export:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 113: mockgcp.cloud.sql.v1.SqlInstancesService.Failover:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 114: mockgcp.cloud.sql.v1.SqlInstancesService.Reencrypt:output_type -> mockgcp.cloud.sql.v1.Operation
	61,  // 115: mockgcp.cloud.sql.v1.SqlInstancesService.Get:output_type -> mockgcp.cloud.sql.v1.DatabaseInstance
	95,  // 116: mockgcp.cloud.sql.v1.SqlInstancesService.Import:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 117: mockgcp.cloud.sql.v1.SqlInstancesService.Insert:output_type -> mockgcp.cloud.sql.v1.Operation
	50,  // 118: mockgcp.cloud.sql.v1.SqlInstancesService.List:output_type -> mockgcp.cloud.sql.v1.InstancesListResponse
	51,  // 119: mockgcp.cloud.sql.v1.SqlInstancesService.ListServerCas:output_type -> mockgcp.cloud.sql.v1.InstancesListServerCasResponse
	95,  // 120: mockgcp.cloud.sql.v1.SqlInstancesService.Patch:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 121: mockgcp.cloud.sql.v1.SqlInstancesService.PromoteReplica:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 122: mockgcp.cloud.sql.v1.SqlInstancesService.Switchover:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 123: mockgcp.cloud.sql.v1.SqlInstancesService.ResetSslConfig:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 124: mockgcp.cloud.sql.v1.SqlInstancesService.Restart:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 125: mockgcp.cloud.sql.v1.SqlInstancesService.RestoreBackup:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 126: mockgcp.cloud.sql.v1.SqlInstancesService.RotateServerCa:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 127: mockgcp.cloud.sql.v1.SqlInstancesService.StartReplica:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 128: mockgcp.cloud.sql.v1.SqlInstancesService.StopReplica:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 129: mockgcp.cloud.sql.v1.SqlInstancesService.TruncateLog:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 130: mockgcp.cloud.sql.v1.SqlInstancesService.Update:output_type -> mockgcp.cloud.sql.v1.Operation
	82,  // 131: mockgcp.cloud.sql.v1.SqlInstancesService.CreateEphemeral:output_type -> mockgcp.cloud.sql.v1.SslCert
	95,  // 132: mockgcp.cloud.sql.v1.SqlInstancesService.RescheduleMaintenance:output_type -> mockgcp.cloud.sql.v1.Operation
	55,  // 133: mockgcp.cloud.sql.v1.SqlInstancesService.VerifyExternalSyncSettings:output_type -> mockgcp.cloud.sql.v1.SqlInstancesVerifyExternalSyncSettingsResponse
	95,  // 134: mockgcp.cloud.sql.v1.SqlInstancesService.StartExternalSync:output_type -> mockgcp.cloud.sql.v1.Operation
	95,  // 135: mockgcp.cloud.sql.v1.SqlInstancesService.PerformDiskShrink:output_type -> mockgcp.cloud.sql.v1.Operation
	56,  // 136: mockgcp.cloud.sql.v1.SqlInstancesService.GetDiskShrinkConfig:output_type -> mockgcp.cloud.sql.v1.SqlInstancesGetDiskShrinkConfigResponse
	95,  // 137: mockgcp.cloud.sql.v1.SqlInstancesService.ResetReplicaSize:output_type -> mockgcp.cloud.sql.v1.Operation
	58,  // 138: mockgcp.cloud.sql.v1.SqlInstancesService.GetLatestRecoveryTime:output_type -> mockgcp.cloud.sql.v1.SqlInstancesGetLatestRecoveryTimeResponse
	107, // [107:139] is the sub-list for method output_type
	75,  // [75:107] is the sub-list for method input_type
	75,  // [75:75] is the sub-list for extension type_name
	75,  // [75:75] is the sub-list for extension extendee
	0,   // [0:75] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_init() }
func file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_init() {
	if File_mockgcp_cloud_sql_v1_cloud_sql_instances_proto != nil {
		return
	}
	file_mockgcp_cloud_sql_v1_cloud_sql_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesAddServerCaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDemoteMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDemoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesFailoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesListServerCasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPromoteReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesSwitchoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesResetSslConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRestoreBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRotateServerCaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStartReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStopReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesTruncateLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPerformDiskShrinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRescheduleMaintenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesReencryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesReencryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupReencryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetDiskShrinkConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesVerifyExternalSyncSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStartExternalSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesResetReplicaSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesCreateEphemeralCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesDemoteMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesDemoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesFailoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SslCertsCreateEphemeralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesListServerCasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesRestoreBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesRotateServerCaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesTruncateLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesVerifyExternalSyncSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetDiskShrinkConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetLatestRecoveryTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetLatestRecoveryTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinLogCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRescheduleMaintenanceRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoteMasterContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoteContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailoverContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreBackupContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotateServerCaContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateLogContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlExternalSyncSettingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnPremisesConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInstance_SqlFailoverReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInstance_SqlScheduledMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInstance_SqlOutOfDiskReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRescheduleMaintenanceRequestBody_Reschedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig)(nil),
	}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig)(nil),
	}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes[64].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_depIdxs,
		EnumInfos:         file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_enumTypes,
		MessageInfos:      file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_sql_v1_cloud_sql_instances_proto = out.File
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_rawDesc = nil
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_goTypes = nil
	file_mockgcp_cloud_sql_v1_cloud_sql_instances_proto_depIdxs = nil
}
