#!/bin/bash
# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/bin/bash
set -x
set -o nounset

echo "${SUFFIX}" # "export SUFFIX=\$(date +%d)" 
# suffix=$(date +%d)
# suffix=$(date --date=yesterday +%d)
REPO_ROOT="$(git rev-parse --show-toplevel)"
PASS_LOG="${REPO_ROOT}/iterate_800_compile-gcloud-pass-${SUFFIX}.log" 
FAIL_LOG="${REPO_ROOT}/iterate_800_compile-gcloud-failure-${SUFFIX}.log"
RESOURCE_LIST="${REPO_ROOT}/proto-gcloud-1-tmp.yaml"

function setup_gcp() {
    # TODO change to env var before uploading
    billing_account="012914-9E95D1-A1EEE8"
    # TODO change to env var before uploading
    org_name="406172723981"

    gcloud projects describe "${project_name}"
    if [[ $? -eq 0 ]]; then
        echo "[create project] ${resource} already exist" >> "${PASS_LOG}"

        result=$(gcloud billing projects link "${project_name}" --billing-account=${billing_account} 2>&1)
        if [[ $? -eq 0 ]]; then
            echo "[link billing account] ${resource} " >> "${PASS_LOG}"
        else
            echo "[link billing account] ${resource}: ${result} " >> "${FAIL_LOG}"
            return 1
        fi

        return 0
    fi

    # create if not exist        
    result=$(gcloud projects create "${project_name}" --organization=${org_name} 2>&1)
    if [[ $? -eq 0 ]]; then
        echo "[create project] ${resource}" >> "${PASS_LOG}"
    else
        echo "[create project] ${resource}: ${result}" >> "${FAIL_LOG}"
        return 1
    fi

    # wait until project is ready        
    while true; do
        result=$(gcloud projects describe "${project_name}" 2>&1)
        if [[ $? -eq 0 ]]; then
            echo "[create project] ${resource} created" >> "${PASS_LOG}"
            break
        else 
            echo "[create project] ${resource} creating..." >> "${PASS_LOG}"
            sleep 5
        fi
    done
    
    result=$(gcloud billing projects link "${project_name}" --billing-account=${billing_account} 2>&1)
    if [[ $? -eq 0 ]]; then
        echo "[link billing account] ${resource} " >> "${PASS_LOG}"
    else
        echo "[link billing account] ${resource}: ${result} " >> "${FAIL_LOG}"
        return 1
    fi

    return 0
}

function enable_service() {
    gcloud services enable aiplatform.googleapis.com --project "${project_name}"
    
    # while IFS= read -r service || [[ -n $service ]] ; do
    #     service_full_name="${service}.googleapis.com"
    #     result=$(gcloud services enable "${service_full_name}" --project "${project_name}" --quiet 2>&1)
    #     if [[ $? -eq 0 ]]; then
    #         echo "[enable service] ${project_name} ${service_full_name}" >> "${PASS_LOG}"
    #     else 
    #         echo "[enable service] ${project_name} ${service_full_name}: ${result} " >> "${FAIL_LOG}"
    #     fi
    # done < "${SERVICE_LIST}"
}

function project_name() {
    # Project has 6-30 characater limit, starting with a lower case char
    project_name=${service,,}-${proto,,}-${SUFFIX} # e.g. yuwenma-02-10-spanner-instance
    while true; do
        if [[ ${#project_name} -ge 30 ]]; then
            echo "[project validation] ${project_name} too long" >> "${PASS_LOG}"
            project_name="${project_name#*-}"
        else
            break
        fi
    done
    echo "${project_name}"
}


while IFS= read -r -d "---" yaml_chunk; do
    if [[ -z "$yaml_chunk" ]]; then
        continue
    fi

    json_str=$(yq <<< "$yaml_chunk")

    service=$(echo "$json_str" | jq -r '.service')
    proto=$(echo "$json_str" | jq -r '.proto')

    resource=${service}-${proto}

    project_name=$(project_name)

    if ! setup_gcp
    then
        continue
    fi 

    # # Optional: enabling services take a long long time
    if ! enable_service
    then
        continue
    fi

    # # TODO cleanup

done < "${RESOURCE_LIST}"

echo Good job!
