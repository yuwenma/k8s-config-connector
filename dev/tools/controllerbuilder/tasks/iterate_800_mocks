
#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Iterate 800 feature branch

# for each feature branch

# OPTIONAL: User add some tests (simple, general ones, such as linter, or compiler)
# Run gemini-script-1 to improve api and mapper
# Run gemini-script-2 to add fuzz test
# Run fuzz test to verify api and mapper
# Pass create PR, fail record result in file

# Run gemini-script-3 to improve controller
# Run gemini-script-4 to generate test data
# Run real-gcp test to verify controller
# Pass update PR, fail record result in file

# Run gemini-script-5 to create mockgcp
# Run mock-gcp test to verify mock
# Pass update PR, and assign Yuwen to review.

#!/bin/bash
set -e
set -x

REPO_ROOT="$(git rev-parse --show-toplevel)"
TASK_DIR=${REPO_ROOT}/dev/tools/controllerbuilder/tasks

# List the resource from a YAML file with delimiter "---"
gcloud_list="${REPO_ROOT}/gcloud-list-test.txt" 
success_list="${REPO_ROOT}/gcloud-llm-1-create-test-pass.log" 
failed_list="${REPO_ROOT}/gcloud-llm-1-create-test-fail.log" 


# TODO: It is cleaner and saver to use different repos for tooling code and resource code.
DEST_REPO=$REPO_ROOT

log_debug() {
  local message="$1"
  echo "[DEBUG] $(date): $message" >> iterate-800-mock-debug.log
}

function verify_gcloud() {
    return 0
    feedback=$(${TASK_DIR}/mock-2-verify_gcloud "$1" "$2" ${DEST_REPO} 2>&1)
    if [[ $? -ne 0 ]]; then
        echo $feedback
        return 1
    fi 
    return 0
}

function llm_add_gcloud_sh() {

    retries=1
    while [[ $retries -ge 0 ]]; do
        # TODO verify
        
        verify_gcloud $1
        if [[ $? -eq 0 ]]; then
            return 0
        fi
        log=$(${TASK_DIR}/mock-1-llm_add_gcloud_sh ${DEST_REPO} "$1" 2>&1)
        if [[ $? -ne 0 ]]; then
            return 1
        else
            log_debug  "llm_add_gcloud_sh: ${log}"
        fi
        ((retries--))
    done
    return 1
}

function set_git() {
    cd ${DEST_REPO}
    # TODO check if current is clean
    git checkout origin/master
    
    branch=mock-llm-$(echo "${1}"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    git checkout -B ${2}
    cd ${REPO_ROOT}
}

function git_commit() {
    service="${1#gcloud }"
    branch=mock-llm-$(echo "${1}"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    msg=${3:-}

    cd ${DEST_REPO}
    git add mockgcp/mock${service}*
    git commit -m "${msg}"

    if [[ ${2:-} -eq 1 ]]; then # push to remote
        git push origin ${branch}
    fi

    cd ${REPO_ROOT}
}

function push_pr() {
    branch=mock-llm-$(echo "${1}"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    cd ${DEST_REPO}
    
    git push origin ${branch}

    cd ${REPO_ROOT}
}   

while IFS= read -r line; do

    if [[ "$line" == "gcloud alpha "* ]]; then
        continue
    elif  [[ "$line" == "gcloud beta "* ]]; then
        continue
    fi
    
    resource="${line#gcloud }"
    branch=mock-llm-$(echo "${1}"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 

    set_git ${resource} ${branch}

    # Step 1. Add test
    llm_add_gcloud_sh ${resource}

    if [[ $? -eq 0 ]]; then
        echo "${resource} created script.yaml test " >> ${success_list}

        log=$(git_commit  ${resource} 1 "1. create test for ${resource}" 2>&1)
        if [[ $? -eq 0 ]]; then
            echo "${resource} pushed to ${branch}" >> ${success_list}
        else    
            echo "${resource} failed to push: ${log}" >> ${failed_list}
        fi 

    else 
        echo "${resource} failed in 1. create test " >> ${failed_list}
    fi

    break

done < "$gcloud_list"