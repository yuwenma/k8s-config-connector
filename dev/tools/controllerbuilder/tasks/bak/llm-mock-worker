
#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Iterate 800 feature branch

# for each feature branch

# OPTIONAL: User add some tests (simple, general ones, such as linter, or compiler)
# Run gemini-script-1 to improve api and mapper
# Run gemini-script-2 to add fuzz test
# Run fuzz test to verify api and mapper
# Pass create PR, fail record result in file

# Run gemini-script-3 to improve controller
# Run gemini-script-4 to generate test data
# Run real-gcp test to verify controller
# Pass update PR, fail record result in file

# Run gemini-script-5 to create mockgcp
# Run mock-gcp test to verify mock
# Pass update PR, and assign Yuwen to review.

#!/bin/bash
set -e
set -x

REPO_ROOT="$(git rev-parse --show-toplevel)"
CB_DIR=dev/tools/controllerbuilder

# TODO: remove once the code is merged
UNCOMMIT_ROOT="/usr/local/google/home/yuwenma/go/src/github.com/GoogleCloudPlatform/k8s-config-connector"

INS_CREATE_CRUD_TEST=cmd/codebot/examples/mockgcp-test-case/1-create-test.md
# INS_RECORD_REAL_LOG=cmd/codebot/examples/mockgcp-test-case/2-record-realgcp-output.md
INS_CREATE_MOCK_SERVER=cmd/codebot/examples/mockgcp-test-case/3a-implement-mock.md
INS_COMPARE_MOCK_AND_REAL=cmd/codebot/examples/mockgcp-test-case/3b-compare-mock-output.md

FEATURE_BRANCH_PREFIX="mock-llm-"
BRANCH=$(git branch --show)

# This script should be run under the mock feature branch.
# Verify the git repo right resource
if [[ "$BRANCH" != ${FEATURE_BRANCH_PREFIX}* ]]; then
    echo "[ERROR] git HEAD is not in a feature branch"
    exit 1
fi 

RESOURCE=${BRANCH#"${FEATURE_BRANCH_PREFIX}"}
echo "LLM to add mock test for resource ${RESOURCE}"

PASS_LOG="${REPO_ROOT}/llm_mock_${RESOURCE}-pass.log" 
FAIL_LOG="${REPO_ROOT}/llm_mock_${RESOURCE}-failure.log"
LLM_LOG="${REPO_ROOT}/llm_mock_${RESOURCE}-codebot.log"


function codebot() {
    instruction_path=${REPO_ROOT}/${CB_DIR}/$1
    if [[ -d "$instruction_path" ]]; then
        original_path=${UNCOMMIT_ROOT}/${CB_DIR}/$1
        cp "${original_path}" "${instruction_path}"
    fi

    if [[ $? -ne 0 ]]; then
        echo "[set metadata] failed onÂ ${RESOURCE}" >> "${FAIL_LOG}"
        exit 1
    fi

    project_name=$(project_name)
    if $2 ; then
        # output=$(go run "${REPO_ROOT}"/dev/tools/controllerbuilder/cmd/codebot --project "${project_name}" --proto-dir "${REPO_ROOT}"/.build/third_party/googleapis/ < "$instruction_path" 2>&1)
    
        go run "${REPO_ROOT}"/dev/tools/controllerbuilder/cmd/codebot --project "${project_name}" --proto-dir "${REPO_ROOT}"/.build/third_party/googleapis/ < "$instruction_path" | while IFS= read -r line; do
            echo "$line"
        done
    
    else
        go run "${REPO_ROOT}"/dev/tools/controllerbuilder/cmd/codebot --project "${project_name}" < "$instruction_path" | while IFS= read -r line; do
            echo "$line"
        done
       # output=$(go run "${REPO_ROOT}"/dev/tools/controllerbuilder/cmd/codebot --project "${project_name}" < "$instruction_path" 2>&1)
    fi 
    
    echo "[llm codebot] $(basename "$instruction_path"): ${output}" >> "${LLM_LOG}"
    if [[ $? -ne 0 ]]; then
        echo "[llm codebot] failed on $(basename "$instruction_path")" >> "${FAIL_LOG}"
        exit 1
    fi
    return 0
}

function record_real_log() {
    # 1. Build crud path based on gcloud convention. mockSERVICE
    local service="${RESOURCE%-*}"
    local possible_subs="${RESOURCE#*-}"
    possible_subs=$(echo "${possible_subs}"| tr '-' '/')
    test_crud_path=mock${service}/testdata/${possible_subs}/crud

    if [[ ! -d ${test_crud_path} ]]; then
        # 2. get from last git-commit
        test_file_name=$(git show --pretty="format:" --name-only HEAD | tail -1)
        if [[ $? -ne 0 ]]; then
            # 3. TODO from LLM for metadata 
            echo "[go test] fail to get crud name: ${test_file_name}" >> "${FAIL_LOG}"
            exit 1
        else 
            test_crud_path=$(dirname "${test_file_name}")
        fi 
    fi

    test_crud_path=${test_crud_path#mockgcp/}
    
    result=$(WRITE_GOLDEN_OUTPUT=1 E2E_GCP_TARGET=real go test "${REPO_ROOT}"/mockgcp/mockgcptests -run TestScripts/"${test_crud_path}")
    if [[ $? -ne 0 ]]; then
        echo "[go test] fail to run test: ${result}" >> "${FAIL_LOG}"
        exit 1
    fi 
    # TODO check if test failed
    echo "${result}"
    return 0
}

function project_name() {
    # Project has 6-30 characater limit, starting with a lower case char
    resource="$(basename "${REPO_ROOT}")"
    project_name=${resource}-$(date --date=yesterday +%d) # e.g. yuwenma-02-10-spanner-instance
    while true; do
        if [[ ${#project_name} -ge 30 ]]; then
            echo "[project validation] ${project_name} too long" >> "${PASS_LOG}"
            project_name="${project_name#*-}"
        else
            break
        fi
    done
    echo "${project_name}"
}

function push_pr() {
    return 0
}

retries=1

function run_worker() {
    cd  "${REPO_ROOT}"/mockgcp
    echo "[current directory] ${REPO_ROOT}/mockgcp" 
    
    for ((i=retries; i>0; i--)); do

        # Verify mock server
        # if ! codebot ${INS_COMPARE_MOCK_AND_REAL}
        # then
        #     echo "[llm codebot] Verified" >> "${PASS_LOG}"
        #     return 0
        # fi

        # Step 1. Use LLM to create test example in testdata/<resource>/crud/script.yaml
        # if codebot ${INS_CREATE_CRUD_TEST}
        # then
        #     continue
        # fi
        # echo "[llm codebot] $(basename $INS_CREATE_CRUD_TEST)" >> "${PASS_LOG}"

        # Step 2. Record real GCP log
        # This can be also be done by codebot. 
        # codebot ${INS_RECORD_REAL_LOG}
        # if record_real_log
        # then
        #     continue
        # fi
        # echo "[go test] record_real_log" >> "${PASS_LOG}"

        # Step 3. Use LLM to create mock server
        if codebot ${INS_CREATE_MOCK_SERVER} true
        then
            continue
        fi
        echo "[llm codebot] $(basename $INS_CREATE_MOCK_SERVER)" >> "${PASS_LOG}"

    done

    return 1
}

# Call LLM codebot to generate mock code
git fetch --depth=2
if ! run_worker
then
    push_pr
else 
    echo "Unfortunately, this run failed with ${retries} attempts." 
    exit 1
fi
