
#!/bin/bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Iterate 800 feature branch

# for each feature branch

# OPTIONAL: User add some tests (simple, general ones, such as linter, or compiler)
# Run gemini-script-1 to improve api and mapper
# Run gemini-script-2 to add fuzz test
# Run fuzz test to verify api and mapper
# Pass create PR, fail record result in file

# Run gemini-script-3 to improve controller
# Run gemini-script-4 to generate test data
# Run real-gcp test to verify controller
# Pass update PR, fail record result in file

# Run gemini-script-5 to create mockgcp
# Run mock-gcp test to verify mock
# Pass update PR, and assign Yuwen to review.

#!/bin/bash
set -e
set -x

REPO_ROOT="$(git rev-parse --show-toplevel)"
TASK_DIR=${REPO_ROOT}/dev/tools/controllerbuilder/tasks

# TODO: change to the list that passes step 2
gcloud_list="${REPO_ROOT}/gcloud-3-list.txt" 
success_list="${REPO_ROOT}/gcloud-llm-3-add-mock-pass.log" 
failed_list="${REPO_ROOT}/gcloud-llm-3-add-mock-full.log"


# TODO: It is cleaner and saver to use different repos for tooling code and resource code.
DEST_REPO="${HOME}/go/src/github.com/GoogleCloudPlatform/k8s-config-connector-back"

log_debug() {
  local message="$1"
  echo "[DEBUG] $(date): $message" >> iterate-800-mock-3-debug.log
}

function verify_gcloud() {
    return 0
    feedback=$(${TASK_DIR}/mock-2-verify_gcloud "$1" "$2" ${REPO_ROOT} 2>&1)
    if [[ $? -ne 0 ]]; then
        echo $feedback
        return 1
    fi 
    return 0
}

function llm_add_mock() {

    retries=1
    while [[ $retries -ge 0 ]]; do
        # TODO verify
        
        # verify_gcloud $1
        # if [[ $? -eq 0 ]]; then
        #     return 0
        # fi
        log=$(${TASK_DIR}/mock-3-llm_add_mock ${REPO_ROOT} "${1}" 2>&1)
        if [[ $? -ne 0 ]]; then
            return 1
        else
            log_debug  "llm_add_mock: ${log}"
            echo  $log
            return 0
        fi
        ((retries--))
    done
    return 1
}

function set_git() {
    cd ${DEST_REPO}
    branch=mock-llm-$(echo "$1"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 

    git checkout upstream/${branch}
    git checkout -B ${branch}

    cd ${REPO_ROOT}
}


function git_commit() {
    branch=mock-llm-$(echo "$1"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    msg=${3:-}

    test_crud_path=$(get_file_name $1)
    if [[ $? -ne 0 ]]; then  
        echo "get file name failed" >&2
        return 1
    fi

    cd ${DEST_REPO}
    git add mockgcp/$test_crud_path
    git commit -m "${msg}"

    if [[ ${2:-} -eq 1 ]]; then # push to remote
        git push upstream ${branch}
    fi

    cd ${REPO_ROOT}
}

function capture_real_log() {
    cd ${DEST_REPO}
    branch=mock-llm-$(echo "$1"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    test_file_name=$(git show --pretty="format:" --name-only HEAD | tail -1)
    
    if [[ $? -ne 0 ]]; then
        echo $1 git-commt does not have test file 1: ${branch} >> ${failed_list}
    fi 

    test_crud_path=$(dirname $test_file_name)
    if [[ $test_crud_path != "*/crud" ]]; then
        echo $1 git-commt does not have test file 2: ${branch} >> ${failed_list}
    fi
    
    WRITE_GOLDEN_OUTPUT=1 E2E_GCP_TARGET=real go test ${DEST_REPO}/mockgcp/mockgcptests -run TestScripts/${test_crud_path}
    cd ${REPO_ROOT}
}

function get_file_name() {

    test_file_name=$(git show --pretty="format:" --name-only HEAD | tail -1)
    if [[ $? -ne 0 ]]; then
        echo $1 git-commt does not have test file 1: ${branch} >> ${failed_list}
        return 1
    fi 

    test_crud_path=$(dirname $test_file_name)
    test_crud_path=${test_crud_path#mockgcp/} # trim mockgcp/ 

    if [[ $test_crud_path != */crud ]]; then
        echo $1 git-commt does not have test file 2: ${branch} >> ${failed_list}
        return 1
    fi

    echo $test_crud_path
    return 0
}

while IFS= read -r line || [[ -n $line ]] ; do

    if [[ "$line" == "gcloud alpha "* ]]; then
        continue
    elif  [[ "$line" == "gcloud beta "* ]]; then
        continue
    fi
    
    resource="${line#gcloud }"
    branch=mock-llm-$(echo "${resource}"| tr ' ' '-') # "gcloud spanner instance" uses branch "mock-llm-spanner-instance" 
    
    set_git ${resource}

    retries=0
    while [[ $retries -ge 0 ]]; do

        # Step 1. Add test
        result=$(llm_add_mock "${resource}" 2>&1)
        if [[ $? -eq 0 ]]; then
            log=$(git_commit  "${resource}" "0" "create mock gcp for ${resource}" 2>&1)
            if [[ $? -eq 0 ]]; then
                echo "${resource} pushed to ${branch}" >> ${success_list}
                break
            else
                echo "${resource} failed to push" >> ${failed_list}
            fi 
        fi
        # gemini 2.0 has quota limits per_minute_per_project 


        # # Step 2.Â capture real gcp log
        # result=$(capture_real_log "${resource}")

        # if [[ $? -eq 0 ]]; then
        #     log=$(go_commit  "${resource}" "$created_file" "0" "record real gcp log for ${resource}" 2>&1)
        #     if [[ $? -eq 0 ]]; then
        #         echo "${resource} pushed to ${branch}" >> ${success_list}
        #         break
        #     else    
        #         echo "${resource} failed to push: ${log}"  >&2 >> ${failed_list}
        #     fi 
        # fi 

        ((retries--))
    done
    sleep 15

    echo "${resource}" >> ${failed_list}

done < "$gcloud_list"

echo Good job!
